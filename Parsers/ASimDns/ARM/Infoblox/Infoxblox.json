{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "workspaceName": {
          "type": "string"
      },
      "location": {
        "type": "string"
      },
      "infobloxComputer": {
          "type": "string",
          "metadata": {
             "description": "Comma separated list of quoted Infoblox computer names"
          }
      }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimdnsinfobloxnios",
            "dependsOn": [
              "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
            ],
            "properties": {
              "etag": "*",
              "displayName": "Vendor Information Model Dns - Infoblox",
              "category": "Security",
              "FunctionAlias": "vimDnsInfobloxNIOS",
              "query": "[concat('let Infoblox=(){let RawData = Syslog | where ProcessName == ''named'' and SyslogMessage has ''client''  \n| where Computer in ('  ,parameters('infobloxComputer'),') \n| extend Parser = extract_all(@''^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)'', dynamic([1,2,3,4]), SyslogMessage) \n| mv-expand todynamic(Parser)  \n| extend ResponseTime = todatetime(Parser[0]),           Log_Type = tostring(Parser[1]),           RawData_subString = tostring(Parser[3])  \n| where Log_Type == ''client''  \n| project-away Parser;RawData \n| extend dnsdata=tostring(extract_all(@''^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)'', dynamic([1,2,3,4]),SyslogMessage)[0][3]) \n| extend EventSubType=iff(dnsdata has ''response:'', ''response'', ''request'')| \n extend dnsclient=iff(EventSubType==''response''            , extract_all(@''^(\\@[a-z0-9]+\\s)?([0-9\\.]+)\\#(\\d+):? (UDP|TCP):? (view: DNS view)?query: (\\S+) ([A-Z]+) (\\S+) response:? ([A-Z]+) (\\S+)(([^;]+;\\s*)*)'',dnsdata)[0]            ,extract_all(@''^(\\@[a-z0-9]+\\s)?([0-9\\.]+)\\#(\\d+):? query: (\\S+) (\\S+) (\\S+) ([+-]) \\(([0-9.]+)\\)'',dnsdata)[0]) \n| extend EventCount=int(1),     EventStartTime=todatetime(TimeGenerated),     EventProduct=''Infoblox DNS'',     EventVendor=''Infoblox'',     EventSchemaVersion=''0.0.1'',     Dvc=Computer,     EventType=''lookup'',     EventResult=iff(EventSubType==''request'' or tostring(dnsclient[8])==''NOERROR'',''Success'',''Failure''),     EventResultDetails=iff(EventSubType==''response'',tostring(dnsclient[8]),''''),          SrcIpAddr = tostring(dnsclient[1]),     EventSubType=iff(dnsclient has ''response:'', ''response'',''request''),         SrcPortNumber = toint(dnsclient[2]),    NetworkProtocol= iff (EventSubType==''reaponse'', tostring(dnsclient[3]),''''),            Query = iff (EventSubType==''response'',tostring(dnsclient[5]), tostring(dnsclient[3])),   QueryClassName = iff (EventSubType==''response'',tostring(dnsclient[6]),tostring(dnsclient[4])),    QueryTypeName = iff(EventSubType==''response'',tostring(dnsclient[7]),tostring(dnsclient[5])),    ResponseCodeName = iff (EventSubType==''response'',tostring(dnsclient[8]),''''),    Flags =iff(EventSubType==''response'', tostring(dnsclient[9]),tostring(dnsclient[6])),        EventMessage = iff (EventSubType==''response'',tostring(dnsclient[-2]),''''),   DstIpAddr=iff(EventSubType==''response'','''',dnsclient[-1])  \n| extend     ResponseCodeName=EventResultDetails,        Domain=Query,    IpAddr=SrcIpAddr;};Infoblox')]",
              "version": 1
          }
        }
      ]
    }
  ]
}