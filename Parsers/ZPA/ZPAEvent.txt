// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias as ZPAEvent.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. ZPAEvent | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let ZPAEvent_view = view () {
    ZPA_CL | where isnotempty(Message)
| extend tmp = parse_json(Message)
| evaluate bag_unpack(tmp)
| extend
        EventVendor="Zscaler",
        EventProduct="Private Access"
};
let ZPAEvent_main_view = view () {
    ZPAEvent_view 
    | extend
            LogTimestamp=column_ifexists('LogTimestamp', ''),
            Customer=column_ifexists('Customer', ''),
            NetworkSessionId=column_ifexists('SessionID', ''),
            ConnectionID=column_ifexists('ConnectionID', ''),
            EventResult=column_ifexists('InternalReason', column_ifexists('ConnectionStatus', '')),
            DvcAction=column_ifexists('ConnectionStatus', column_ifexists('SessionStatus', '')),
            NetworkProtocol=column_ifexists('IPProtocol', ''),
            DoubleEncryption=column_ifexists('DoubleEncryption', ''),
            DstUserName=column_ifexists('Username', column_ifexists('User', '')),
            DstPortNumber=column_ifexists('ServicePort', column_ifexists('ServerPort', column_ifexists('ApplicationPort', ''))),
            SrcIpAddr=column_ifexists('ClientPublicIP', ''),
            SrcNatIpAddr=column_ifexists('ClientPrivateIP', ''),
            SrcGeoLatitude=column_ifexists('ClientLatitude', ''),
            SrcGeoLongitude=column_ifexists('ClientLongitude', ''),
            SrcGeoCountry=column_ifexists('ClientCountryCode', ''),
            ClientZEN=column_ifexists('ClientZEN', ''),
            NetworkRuleName=column_ifexists('Policy', ''),
            ConnectorZEN=column_ifexists('ConnectorZEN', ''),
            ConnectorIP=column_ifexists('ConnectorIP', ''),
            ConnectorPort=column_ifexists('ConnectorPort', ''),
            SrcDvcHostname=column_ifexists('Host', ''),
            Application=column_ifexists('Application', ''),
            AppGroup=column_ifexists('AppGroup', ''),
            DstDomainHostname=column_ifexists('Server', ''),
            DstIpAddr=column_ifexists('ServerIP', ''),
            PolicyProcessingTime=column_ifexists('PolicyProcessingTime', ''),
            CAProcessingTime=column_ifexists('CAProcessingTime', ''),
            ConnectorZENSetupTime=column_ifexists('ConnectorZENSetupTime', ''),
            ConnectionSetupTime=column_ifexists('ConnectionSetupTime', ''),
            ServerSetupTime=column_ifexists('ServerSetupTime', ''),
            AppLearnTime=column_ifexists('AppLearnTime', ''),
            TimestampConnectionStart=column_ifexists('TimestampConnectionStart', ''),
            TimestampConnectionEnd=column_ifexists('TimestampConnectionEnd', ''),
            TimestampCATx=column_ifexists('TimestampCATx', ''),
            TimestampCARx=column_ifexists('TimestampCARx', ''),
            TimestampAppLearnStart=column_ifexists('TimestampAppLearnStart', ''),
            TimestampZENFirstRxClient=column_ifexists('TimestampZENFirstRxClient', ''),
            TimestampZENFirstTxClient=column_ifexists('TimestampZENFirstTxClient', ''),
            TimestampZENLastRxClient=column_ifexists('TimestampZENLastRxClient', ''),
            TimestampZENLastTxClient=column_ifexists('TimestampZENLastTxClient', ''),
            TimestampConnectorZENSetupComplete=column_ifexists('TimestampConnectorZENSetupComplete', ''),
            TimestampZENFirstRxConnector=column_ifexists('TimestampZENFirstRxConnector', ''),
            TimestampZENFirstTxConnector=column_ifexists('TimestampZENFirstTxConnector', ''),
            TimestampZENLastRxConnector=column_ifexists('TimestampZENLastRxConnector', ''),
            TimestampZENLastTxConnector=column_ifexists('TimestampZENLastTxConnector', ''),
            SrcBytes=column_ifexists('ZENTotalBytesRxClient', column_ifexists('TotalBytesRx', column_ifexists('TotalBytesRx', ''))),
            ZENBytesRxClient=column_ifexists('ZENBytesRxClient', ''),
            DstBytes=column_ifexists('ZENTotalBytesTxClient', column_ifexists('TotalBytesTx', column_ifexists('TotalBytesTx', ''))),
            ZENBytesTxClient=column_ifexists('ZENBytesTxClient', ''),
            ZENTotalBytesRxConnector=column_ifexists('ZENTotalBytesRxConnector', ''),
            ZENBytesRxConnector=column_ifexists('ZENBytesRxConnector', ''),
            ZENTotalBytesTxConnector=column_ifexists('ZENTotalBytesTxConnector', ''),
            ZENBytesTxConnector=column_ifexists('ZENBytesTxConnector', ''),
            Idp=column_ifexists('Idp', ''),
            Version=column_ifexists('Version', ''),
            ZEN=column_ifexists('ZEN', ''),
            CertificateCN=column_ifexists('CertificateCN', ''),
            PrivateIP=column_ifexists('PrivateIP', ''),
            DvcIpAddr=column_ifexists('PublicIP', ''),
            Latitude=column_ifexists('Latitude', ''),
            Longitude=column_ifexists('Longitude', ''),
            CountryCode=column_ifexists('CountryCode', ''),
            TimestampAuthentication=column_ifexists('TimestampAuthentication', ''),
            TimestampUnAuthentication=column_ifexists('TimestampUnAuthentication', ''),
            DvcHostname=column_ifexists('Hostname', ''),
            SrcDvcOs=column_ifexists('Platform', ''),
            DvcType=column_ifexists('ClientType', ''),
            TrustedNetworks=column_ifexists('TrustedNetworks', ''),
            TrustedNetworksNames=column_ifexists('TrustedNetworksNames', ''),
            SAMLAttributes=column_ifexists('SAMLAttributes', ''),
            PosturesHit=column_ifexists('PosturesHit', ''),
            PosturesMiss=column_ifexists('PosturesMiss', ''),
            ZENLatitude=column_ifexists('ZENLatitude', ''),
            ZENLongitude=column_ifexists('ZENLongitude', ''),
            ZENCountryCode=column_ifexists('ZENCountryCode', ''),
            SessionType=column_ifexists('SessionType', ''),
            Connector=column_ifexists('Connector', ''),
            ConnectorGroup=column_ifexists('ConnectorGroup', ''),
            CPUUtilization=column_ifexists('CPUUtilization', ''),
            MemUtilization=column_ifexists('MemUtilization', ''),
            ServiceCount=column_ifexists('ServiceCount', ''),
            InterfaceDefRoute=column_ifexists('InterfaceDefRoute', ''),
            DefRouteGW=column_ifexists('DefRouteGW', ''),
            PrimaryDNSResolver=column_ifexists('PrimaryDNSResolver', ''),
            HostUpTime=column_ifexists('HostUpTime', ''),
            ConnectorUpTime=column_ifexists('ConnectorUpTime', ''),
            NumOfInterfaces=column_ifexists('NumOfInterfaces', ''),
            BytesRxInterface=column_ifexists('BytesRxInterface', ''),
            PacketsRxInterface=column_ifexists('PacketsRxInterface', ''),
            ErrorsRxInterface=column_ifexists('ErrorsRxInterface', ''),
            DiscardsRxInterface=column_ifexists('DiscardsRxInterface', ''),
            BytesTxInterface=column_ifexists('BytesTxInterface', ''),
            PacketsTxInterface=column_ifexists('PacketsTxInterface', ''),
            ErrorsTxInterface=column_ifexists('ErrorsTxInterface', ''),
            DiscardsTxInterface=column_ifexists('DiscardsTxInterface', ''),
            ModifiedTime=column_ifexists('ModifiedTime', ''),
            CreationTime=column_ifexists('CreationTime', ''),
            ModifiedBy=column_ifexists('ModifiedBy', ''),
            RequestID=column_ifexists('RequestID', ''),
            AuditOldValue=column_ifexists('AuditOldValue', ''),
            AuditNewValue=column_ifexists('AuditNewValue', ''),
            AuditOperationType=column_ifexists('AuditOperationType', ''),
            ObjectType=column_ifexists('ObjectType', ''),
            ObjectName=column_ifexists('ObjectName', ''),
            ObjectID=column_ifexists('ObjectID', ''),
            CustomerID=column_ifexists('CustomerID', ''),
            Exporter=column_ifexists('Exporter', ''),
            TimestampRequestReceiveStart=column_ifexists('TimestampRequestReceiveStart', ''),
            TimestampRequestReceiveHeaderFinish=column_ifexists('TimestampRequestReceiveHeaderFinish', ''),
            TimestampRequestReceiveFinish=column_ifexists('TimestampRequestReceiveFinish', ''),
            TimestampRequestTransmitStart=column_ifexists('TimestampRequestTransmitStart', ''),
            TimestampRequestTransmitFinish=column_ifexists('TimestampRequestTransmitFinish', ''),
            TimestampResponseReceiveStart=column_ifexists('TimestampResponseReceiveStart', ''),
            TimestampResponseReceiveFinish=column_ifexists('TimestampResponseReceiveFinish', ''),
            TimestampResponseTransmitStart=column_ifexists('TimestampResponseTransmitStart', ''),
            TimestampResponseTransmitFinish=column_ifexists('TimestampResponseTransmitFinish', ''),
            TotalTimeRequestReceive=column_ifexists('TotalTimeRequestReceive', ''),
            TotalTimeRequestTransmit=column_ifexists('TotalTimeRequestTransmit', ''),
            TotalTimeResponseReceive=column_ifexists('TotalTimeResponseReceive', ''),
            TotalTimeResponseTransmit=column_ifexists('TotalTimeResponseTransmit', ''),
            TotalTimeConnectionSetup=column_ifexists('TotalTimeConnectionSetup', ''),
            TotalTimeServerResponse=column_ifexists('TotalTimeServerResponse', ''),
            HttpRequestMethod=column_ifexists('Method', ''),
            NetworkApplicationProtocol=column_ifexists('Protocol', ''),
            UrlHostname=column_ifexists('Host', ''),
            UrlOriginal=column_ifexists('URL', ''),
            HttpUserAgentOriginal=column_ifexists('UserAgent', ''),
            HttpRequestXff=column_ifexists('XFF', ''),
            NameID=column_ifexists('NameID', ''),
            HttpStatusCode=column_ifexists('StatusCode', ''),
            HttpRequestBodyBytes=column_ifexists('RequestSize', ''),
            HttpResponseBodyBytes=column_ifexists('ResponseSize', ''),
            SrcPortNumber=column_ifexists('ClientPublicPort', ''),
            EventResultDetails=column_ifexists('ConnectionReason', ''),
            CorsToken=column_ifexists('CorsToken', ''),
            Origin=column_ifexists('Origin', '')
       | project
            TimeGenerated,
            LogTimestamp,
            Customer,
            NetworkSessionId,
            ConnectionID,
            EventResult,
            DvcAction,
            NetworkProtocol,
            DoubleEncryption,
            DstUserName,
            DstPortNumber,
            SrcIpAddr,
            SrcNatIpAddr,
            SrcGeoLatitude,
            SrcGeoLongitude,
            SrcGeoCountry,
            ClientZEN,
            NetworkRuleName,
            Connector,
            ConnectorZEN,
            ConnectorIP,
            ConnectorPort,
            SrcDvcHostname,
            Application,
            AppGroup,
            DstDomainHostname,
            DstIpAddr,
            PolicyProcessingTime,
            CAProcessingTime,
            ConnectorZENSetupTime,
            ConnectionSetupTime,
            ServerSetupTime,
            AppLearnTime,
            TimestampConnectionStart,
            TimestampConnectionEnd,
            TimestampCATx,
            TimestampCARx,
            TimestampAppLearnStart,
            TimestampZENFirstRxClient,
            TimestampZENFirstTxClient,
            TimestampZENLastRxClient,
            TimestampZENLastTxClient,
            TimestampConnectorZENSetupComplete,
            TimestampZENFirstRxConnector,
            TimestampZENFirstTxConnector,
            TimestampZENLastRxConnector,
            TimestampZENLastTxConnector,
            SrcBytes,
            ZENBytesRxClient,
            DstBytes,
            ZENBytesTxClient,
            ZENTotalBytesRxConnector,
            ZENBytesRxConnector,
            ZENTotalBytesTxConnector,
            ZENBytesTxConnector,
            Idp,
            Version,
            ZEN,
            CertificateCN,
            PrivateIP,
            DvcIpAddr,
            Latitude,
            Longitude,
            CountryCode,
            TimestampAuthentication,
            TimestampUnAuthentication,
            DvcHostname,
            DvcType,
            TrustedNetworks,
            TrustedNetworksNames,
            SAMLAttributes,
            PosturesHit,
            PosturesMiss,
            ZENLatitude,
            ZENLongitude,
            ZENCountryCode,
            SessionType,
            SrcDvcOs,
            ConnectorGroup,
            CPUUtilization,
            MemUtilization,
            ServiceCount,
            InterfaceDefRoute,
            DefRouteGW,
            PrimaryDNSResolver,
            HostUpTime,
            ConnectorUpTime,
            NumOfInterfaces,
            BytesRxInterface,
            PacketsRxInterface,
            ErrorsRxInterface,
            DiscardsRxInterface,
            BytesTxInterface,
            PacketsTxInterface,
            ErrorsTxInterface,
            DiscardsTxInterface,
            ModifiedTime,
            CreationTime,
            ModifiedBy,
            RequestID,
            AuditOldValue,
            AuditNewValue,
            AuditOperationType,
            ObjectType,
            ObjectName,
            ObjectID,
            CustomerID,
            Exporter,
            TimestampRequestReceiveStart,
            TimestampRequestReceiveHeaderFinish,
            TimestampRequestReceiveFinish,
            TimestampRequestTransmitStart,
            TimestampRequestTransmitFinish,
            TimestampResponseReceiveStart,
            TimestampResponseReceiveFinish,
            TimestampResponseTransmitStart,
            TimestampResponseTransmitFinish,
            TotalTimeRequestReceive,
            TotalTimeRequestTransmit,
            TotalTimeResponseReceive,
            TotalTimeResponseTransmit,
            TotalTimeConnectionSetup,
            TotalTimeServerResponse,
            HttpRequestMethod,
            NetworkApplicationProtocol,
            UrlHostname,
            UrlOriginal,
            HttpUserAgentOriginal,
            HttpRequestXff,
            NameID,
            HttpStatusCode,
            HttpRequestBodyBytes,
            HttpResponseBodyBytes,
            SrcPortNumber,
            EventResultDetails,
            CorsToken,
            Origin
};
ZPAEvent_main_view
