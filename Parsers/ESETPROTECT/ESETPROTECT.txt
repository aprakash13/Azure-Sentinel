//
// Get event data
//
let LogHeader = Syslog
    | where ProcessName == "ERAServer"
    | project-rename EventProduct = ProcessName 
    | extend EventVendor = "ESET",
        Message = parse_json(SyslogMessage)
    | extend EventType = Message['event_type'],
        DvcIpAddr = Message['ipv4'],
        EventResourceId = Message['source_uuid'],
        EventCreationTime = make_datetime(Message['occured']),
        EventSeverity = Message['severity'],
        DvcHostname = Message['hostname'];
//
// Threat events
//
let ThreatEvents = LogHeader
    | where EventType == "Threat_Event"
    | extend ThreatCategory = Message['threat_type'],
        ThreatName = Message['threat_name'],
        ThreatFlags = Message['threat_flags'],
        EventSubType = Message['scanner_id'],
        EngineVersion = Message['engine_version'],
        ObjectType = Message['object_type'],
        FilePath = Message['object_uri'],
        EventResult = Message['action_taken'],
        EventError = Message['action_error'],
        ScanId = Message['scanner_id'],
        ThreatHandled = Message['threat_handled'],
        NeedRestart = Message['need_restart'],
        UserName = Message['username'],
        ProcessFilePath = Message['processname'],
        EventMessage = Message['circumstances'],
        FileHashSha1 = Message['hash'],
        FirstSeen = make_datetime(Message['firstseen']);
//
// Firewall Aggregated events
//
let FirewallEvents = LogHeader
    | where EventType == "FirewallAggregated_Event"
    | extend EventMessage = Message['event'],
        SrcDvcIpAddr = Message['source_address'],
        SrcIpIsIpv6 = iff(Message['source_address_type'] == "IPv6", true, false),
        SrcPortNumber = Message['source_port'],
        DstDvcIpAddr = Message['target_address'],
        DstIpIsIpv6 = iff(Message['target_address_type'] == "IPv6", true, false),
        DstPortNumber = Message['target_port'],
        NetworkProtocol = Message['protocol'],
        UserName = Message['account'],
        ProcessFilePath = Message['process_name'],
        NetworkRuleName = Message['rule_name'],
        NetworkRuleNumber = Message['rule_id'],
        NetworkDirection = iff(tobool(Message['inbound']), "Inbound", "Outbound"),
        ThreatName = Message['threat_name'],
        EventCount = Message['aggregate_count'];
//
// Hips events
//
let HipsEvents = LogHeader
    | where EventType == "HIPSAggregated_Event"
    | extend ProcessFilePath = Message['application'],
        EventSubType = Message['action'],
        NetworkRuleName = Message['rule_name'],
        NetworkRuleNumber = Message['rule_id'],
        EventCount = Message['aggregate_count'];
//
// Audit events
//
let AuditEvents = LogHeader
    | where EventType == "Audit_Event"
    | extend UserDomain = Message['domain'],
        EventSubType = Message['action'],
        EventMessage = Message['detail'],
        TargetUserName = Message['target'],
        UserName = Message['user'],
        EventResult = Message['result'];
//
// Enterprise Inspector alert events
//
let EnterpriseInspectorAlertEvents = LogHeader
    | where EventType == "EnterpriseInspectorAlert_Event"
    | extend UserName = Message['username'],
        ProcessFilePath = Message['processname'],
        NetworkRuleName = Message['rulename'],
        FileHashSha1 = Message['hash'],
        EventCount = Message['count'],
        EventReportUrl = Message['eiconsolelink'];
//
// BlockedFiles_Event
//
let BlockedFilesEvents = LogHeader
    | where EventType == "BlockedFiles_Event"
    | extend ProcessFilePath = Message['processname'],
        UserName = Message['username'],
        ThreatHandled = Message['resolved'],
        FileHashSha1 = Message['hash'],
        FilePath = Message['object_uri'],
        EventSubType = Message['action'],
        FirstSeen = make_datetime(Message['firstseen']),
        EventMessage = Message['cause'];
//
// Filtered Website events
//
let FilteredWebsiteEvents = LogHeader
    | where EventType == "FilteredWebsites_Event"
    | extend ProcessFilePath = Message['processname'],
        UserName = Message['username'],
        ThreatHandled = Message['resolved'],
        FileHashSha1 = Message['hash'],
        EventMessage = Message['event'],
        NetworkRuleNumber = Message['rule_id'],
        EventResult = Message['action_taken'],
        ScanId = Message['scanner_id'],
        FilePath = Message['object_uri'],
        UrlOriginal = Message['target_address'];
//
// Format output
//
union ThreatEvents, AuditEvents, FirewallEvents, HipsEvents, BlockedFilesEvents, FilteredWebsiteEvents, EnterpriseInspectorAlertEvents
| project-away SyslogMessage, Message
