// Title:           Alsid for Active Directory Data Parser
// Author:          Alsid
// Version:         1.0
// Last Updated:    12/03/2020
//
// DESCRIPTION:
// This parser takes raw Alsid for AD logs from the relevant connector's data stream and parses the data into a normalized schema
//
// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
//    In order for the Alsid for AD logs to work with pre-built queries and workbooks the Function Alias must be set to - afad_parser
// 3. Function App usually take 10-15 minutes to activate. You can then use Function Alias for other queries
//
//
// REFERENCE: 
// Using functions in Azure monitor log queries: https://docs.microsoft.com/azure/azure-monitor/log-query/functions
//
//
let CodenameTable=datatable(Codename: string, Explanation: string) [
"test-checker-codename", "This is a test checker",
"", "Not an alert",
"C-ADM-ACC-USAGE", "Recent use of the default administrator account",
"C-UNCONST-DELEG", "Dangerous delegation",
"C-PASSWORD-DONT-EXPIRE", "Accounts with never expiring passwords",
"C-USERS-CAN-JOIN-COMPUTERS", "Users allowed to join computers to the domain",
"C-CLEARTEXT-PASSWORD", "Potential clear-text password",
"C-PROTECTED-USERS-GROUP-UNUSED", "Protected Users group not used",
"C-PASSWORD-POLICY", "Weak password policies are applied on users",
"C-GPO-HARDENING", "Domain without computer-hardening GPOs",
"C-LAPS-UNSECURE-CONFIG", "Local administrative account management"
];
let Common = AlsidForADLog_CL
| parse RawData with
                     Time:datetime  " "
                     Host:string  " "
                     Product:string "["
                     PID:int "]: \""
                     MessageType:int "\" \""
                     AlertID:int "\" \""
                     Forest:string "\" \""
                     Domain:string "\" "
                     DistinctPart:string;
let Deviances = Common
| where MessageType == 0 | parse DistinctPart with "\""
                     Codename:string "\" \""
                     Severity:string "\" \""
                     ADObject:string "\" \""
                     DevianceID:string "\" \""
                     ProfileID:string "\" \""
                     ReasonCodename:string "\" \""
                     EventID:string "\""
                     Attributes:string "\r\n";
let Changes = Common
| where MessageType == 1
| parse kind=regex DistinctPart with "\""
                     ADObject:string "\" \""
                     EventID:string "\" \""
                     EventType:string "\" "
                     Attributes:string "\r?\n";
union Changes, Deviances
| project-away DistinctPart, Product, _ResourceId, _SubscriptionId
| lookup kind=leftouter CodenameTable on Codename;
