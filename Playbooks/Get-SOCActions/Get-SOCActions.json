{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Alert_-_Get_incident": {
                "inputs": {
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                    },
                    "method": "get",
                    "path": "/Incidents/subscriptions/@{encodeURIComponent(triggerBody()?['WorkspaceSubscriptionId'])}/resourceGroups/@{encodeURIComponent(triggerBody()?['WorkspaceResourceGroup'])}/workspaces/@{encodeURIComponent(triggerBody()?['WorkspaceId'])}/alerts/@{encodeURIComponent(triggerBody()?['SystemAlertId'])}"
                },
                "runAfter": {},
                "type": "ApiConnection"
            },
            "Condition_2": {
                "actions": {
                    "Add_comment_to_incident_(V3)": {
                        "inputs": {
                            "body": {
                                "incidentArmId": "@body('Alert_-_Get_incident')?['id']",
                                "message": "<p>@{outputs('Compose')}</p>"
                            },
                            "host": {
                                "connection": {
                                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                }
                            },
                            "method": "post",
                            "path": "/Incidents/Comment"
                        },
                        "runAfter": {
                            "Compose": [
                                "Succeeded"
                            ]
                        },
                        "type": "ApiConnection"
                    },
                    "Compose": {
                        "inputs": "<html><body>\n<h3>Incident Analysis Procedures</h3>\n<strong>Recommended Actions:</strong>\n<p><strong>Step 1: Group Events for Analysis</strong>\nThe Primary Analyst should review all events/Alerts in the Incident where necessary. \nIf analysis on any of the events/Alerts is expected to take longer than 5 - 15 minutes, the Primary Analyst will escalate the Incident to \"Open Incident\" by tagging it for review by the Secondary Analyst.\n\n<strong>Step 2: Understanding the Attack</strong>\nThe Primary Analyst should gather and understand the full context of the Incident. \nUse Bookmarks to record the following information (this will be added to the Incident TimeLine as an annotation/evidence): Identify Source IP / Destination IP Addresses.\n\n<strong>Step 3: Analyze and Assess the Impact of the Attack</strong>\nThe Analysts should investigate any Attack by using any/all internal and external tools and resources.</p>\n\n<p style=\"margin-left: 40px\"><strong>Additionally, all Analysts should be prepared to answer the following:</strong>\n   - Was the attempt successful?\n   - How many hosts are involved?\n   - Was the IP blocked by the FW or Proxy?\n   - Were any Customers impacted?\n<strong>What was the origin and/or details about the attacker IP?</strong>\n   - WhoIs, Domain tools\n   - Country, ISP, Business (what is the net block)\n<strong>What was attacked?</strong>\n   - DMZ\n   - Corporate systems\n   - Database(s)\n   - Application(s) - Web?\n<strong>What did they do (or try to do)?</strong>\n   - Identify all date-time-groups (DTG), attack timeline (fast/slow), time of day in source IP time zone.\n   - Identify a series of subtle events or rash of attacks (fast/slow)\n   - Same time of day vs. various times\n<strong>Where did they attack from?</strong>\n   - Identify the IP address of attacked system(s), external/internal/DMZ, applications, open ports, vulnerabilities, and usernames (if any).\n<strong>Why did they do it?</strong>\n   - Identify the purpose of the attack. Targeted or random?\n   - Web Defacement\n   - Admin access\n   - Reconnaissance\n   - Dos/DDoS or other outage\n<strong>How did they go about it?</strong>\n   - Identify the tool used (vulnerability scanner, port scanner), hand crafted, type of attack (buffer overflow, SQL injection, format string), protocol used, flags set, or other details.</p>\n\n<p><strong>Step 4: Determine What Action is Needed</strong> Depending on the severity of the event, an analyst may need to report the Incident in several manners. \nThe outcome of the analysis should prompt the analyst to perform one or more of the following actions. \nOnce one of the below actions are taken, the Incident should be tagged using the appropriate annotation/tagging as detailed in the Event Triage Workflow Procedures.\n<strong>Workflow Proceedures:</strong>\n   - Update/Tag/Close Incident(s)\n   - Report Incidents/Alerts/Events/Bookmarks in Shift Logs\n   - Escalate Incident(s) to IR Team - Use Tagging in Incident\n</p></body></html>",
                        "runAfter": {},
                        "type": "Compose"
                    }
                },
                "else": {
                    "actions": {
                        "For_each": {
                            "actions": {
                                "Condition": {
                                    "actions": {},
                                    "else": {
                                        "actions": {
                                            "Add_comment_to_incident_(V3)_2": {
                                                "inputs": {
                                                    "body": {
                                                        "incidentArmId": "@body('Alert_-_Get_incident')?['id']",
                                                        "message": "<p>@{outputs('Compose_HTML_Output_False')}</p>"
                                                    },
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/Incidents/Comment"
                                                },
                                                "runAfter": {
                                                    "Compose_HTML_Output_False": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ApiConnection"
                                            },
                                            "Compose_HTML_Output_False": {
                                                "inputs": "<html><body>\n<h3>Alert: @{items('For_each')['Alert']}</h3>\n<p><strong>Recommended Actions:</strong></p>\n<p>@{items('For_each')['A1']}\n@{items('For_each')['A2']}\n@{items('For_each')['A3']}\n@{items('For_each')['A4']}\n@{items('For_each')['A5']}\n@{items('For_each')['A6']}\n@{items('For_each')['A7']}\n@{items('For_each')['A8']}\n@{items('For_each')['A9']}\n@{items('For_each')['A10']}\n@{items('For_each')['A11']}\n@{items('For_each')['A12']}\n@{items('For_each')['A13']}\n@{items('For_each')['A14']}\n@{items('For_each')['A15']}\n@{items('For_each')['A16']}\n@{items('For_each')['A17']}\n@{items('For_each')['A18']}\n@{items('For_each')['A19']}\n</p></body></html>",
                                                "runAfter": {},
                                                "type": "Compose"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@empty(items('For_each')['Alert'])",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "runAfter": {},
                                    "type": "If"
                                }
                            },
                            "foreach": "@body('Parse_JSON')",
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Parse_JSON": {
                            "inputs": {
                                "content": "@body('Run_query_and_list_results')?['value']",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "A1": {
                                                "type": "string"
                                            },
                                            "A10": {
                                                "type": "string"
                                            },
                                            "A11": {
                                                "type": "string"
                                            },
                                            "A12": {
                                                "type": "string"
                                            },
                                            "A13": {
                                                "type": "string"
                                            },
                                            "A14": {
                                                "type": "string"
                                            },
                                            "A15": {
                                                "type": "string"
                                            },
                                            "A16": {
                                                "type": "string"
                                            },
                                            "A17": {
                                                "type": "string"
                                            },
                                            "A18": {
                                                "type": "string"
                                            },
                                            "A19": {
                                                "type": "string"
                                            },
                                            "A2": {
                                                "type": "string"
                                            },
                                            "A3": {
                                                "type": "string"
                                            },
                                            "A4": {
                                                "type": "string"
                                            },
                                            "A5": {
                                                "type": "string"
                                            },
                                            "A6": {
                                                "type": "string"
                                            },
                                            "A7": {
                                                "type": "string"
                                            },
                                            "A8": {
                                                "type": "string"
                                            },
                                            "A9": {
                                                "type": "string"
                                            },
                                            "Alert": {
                                                "type": "string"
                                            },
                                            "Date": {
                                                "type": "string"
                                            },
                                            "LastUpdatedTimeUTC": {
                                                "type": "string"
                                            },
                                            "_DTItemId": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "_DTItemId",
                                            "LastUpdatedTimeUTC",
                                            "A1",
                                            "A10",
                                            "A11",
                                            "A12",
                                            "A13",
                                            "A14",
                                            "A15",
                                            "A16",
                                            "A17",
                                            "A18",
                                            "A19",
                                            "A2",
                                            "A3",
                                            "A4",
                                            "A5",
                                            "A6",
                                            "A7",
                                            "A8",
                                            "A9",
                                            "Alert",
                                            "Date"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "runAfter": {},
                            "type": "ParseJson"
                        }
                    }
                },
                "expression": {
                    "and": [
                        {
                            "equals": [
                                "@empty(body('Run_query_and_list_results')?['value'])",
                                true
                            ]
                        }
                    ]
                },
                "runAfter": {
                    "Run_query_and_list_results": [
                        "Succeeded"
                    ]
                },
                "type": "If"
            },
            "Run_query_and_list_results": {
                "inputs": {
                    "body": "_GetWatchlist('SocRA') | where Alert == \"@{triggerBody()?['AlertDisplayName']}\"",
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                        }
                    },
                    "method": "post",
                    "path": "/queryData",
                    "queries": {
                        "resourcegroups": "GBB_Sentinel",
                        "resourcename": "GBBSentinel",
                        "resourcetype": "Log Analytics Workspace",
                        "subscriptions": "0208bc97-b7dc-4866-8b2b-c4725af15834",
                        "timerange": "@{utcNow()}"
                    }
                },
                "runAfter": {
                    "Alert_-_Get_incident": [
                        "Succeeded"
                    ]
                },
                "type": "ApiConnection"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
            "$connections": {
                "defaultValue": {},
                "type": "Object"
            }
        },
        "triggers": {
            "When_a_response_to_an_Azure_Sentinel_alert_is_triggered": {
                "inputs": {
                    "body": {
                        "callback_url": "@{listCallbackUrl()}"
                    },
                    "host": {
                        "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                        }
                    },
                    "path": "/incident-creation"
                },
                "type": "ApiConnectionWebhook"
            }
        }
    },
    "parameters": {
        "$connections": {
            "value": {
                "azuremonitorlogs": {
                    "connectionId": "/subscriptions/52548e0f-10c5-4ffa-8b5b-831eedda9f82/resourceGroups/GBB_LogicApps/providers/Microsoft.Web/connections/azuremonitorlogs-1",
                    "connectionName": "azuremonitorlogs-1",
                    "id": "/subscriptions/52548e0f-10c5-4ffa-8b5b-831eedda9f82/providers/Microsoft.Web/locations/eastus/managedApis/azuremonitorlogs"
                },
                "azuresentinel": {
                    "connectionId": "/subscriptions/52548e0f-10c5-4ffa-8b5b-831eedda9f82/resourceGroups/GBB_LogicApps/providers/Microsoft.Web/connections/azuresentinel-1",
                    "connectionName": "azuresentinel-1",
                    "id": "/subscriptions/52548e0f-10c5-4ffa-8b5b-831eedda9f82/providers/Microsoft.Web/locations/eastus/managedApis/azuresentinel"
                }
            }
        }
    }
}