id: b57fa6f4-fc63-49a5-9b69-2e9662b9e0b8
name: Suspicious application consent similar to C3 OneDrive C2
description: |
  'This will alert when a user consents to provide a previously-unknown Azure application with OAuth permissions used by the F-Secure C3 Framework (https://github.com/FSecureLABS/C3).
  The default permissions/scope for the F-Secure C3 Framework (OneDrive channel) requires only files.readwrite.all.  There are many legitimate OAuth applications that requests these permissions.  You should review the AppURL associated with the OAuth application to help determine whether this consent action was legitimate or related to C3 Framework.  Public contributions to expand the knownApplications filter are welcome!
  For further information on AuditLogs please see https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-audit-activities.'
severity: Low
requiredDataConnectors:
  - connectorId: AzureActiveDirectory
    dataTypes:
      - AuditLogs
queryFrequency: 1d
queryPeriod: 14d
triggerOperator: gt
triggerThreshold: 0
tactics:
  - CredentialAccess
  - DefenseEvasion
  - Exfiltration
relevantTechniques:
  - T1528
  - T1550
  - T1567
query: |
  let timeframe = 14d;
  AuditLogs
  | where TimeGenerated > ago(timeframe)
  | where LoggedByService =~ "Core Directory"
  | where Category =~ "ApplicationManagement"
  | where OperationName =~ "Consent to application"
  | extend AppDisplayName = tostring(TargetResources.[0].displayName)
  | extend AppClientId = tolower(tostring(TargetResources.[0].id))
  | where AppClientId !in ((externaldata(knownAppClientId:string, knownAppDisplayName:string)[@"https://github.com/Azure/Azure-Sentinel/blob/master/Sample%20Data/Feeds/Microsoft.OAuth.KnownApplications.csv"] with (format="csv")))
  | extend ConsentFull = tostring(parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[4].newValue)))
  | parse ConsentFull with * "ConsentType: " GrantConsentType ", Scope: " GrantScope1 "]" *
  | where tolower(GrantScope1) =~ "files.readwrite.all"
  | where GrantConsentType != "AllPrincipals" // NOTE: we are ignoring if OAuth application was granted to all users via an admin - but admin due diligence should be audited occasionally
  | extend GrantIpAddress = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).ipAddress)),
  tostring(parse_json(tostring(InitiatedBy.user)).ipAddress), tostring(parse_json(tostring(InitiatedBy.app)).ipAddress))
  | extend GrantInitiatedBy = iff(isnotempty(tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName)),
  tostring(parse_json(tostring(InitiatedBy.user)).userPrincipalName), tostring(parse_json(tostring(InitiatedBy.app)).displayName))
  | mv-expand AdditionalDetails
  | where tostring(parse_json(AdditionalDetails).key) =~ "User-Agent"
  | extend GrantUserAgent = tostring(parse_json(AdditionalDetails).value)
  | join kind = leftouter (AuditLogs
  | where TimeGenerated > ago(timeframe)
  | where LoggedByService =~ "Core Directory"
  | where Category =~ "ApplicationManagement"
  | extend AppClientId = tolower(tostring(TargetResources[0].id))
  | extend AppReplyURLs = parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[1].newValue))
  )
  on AppClientId // replace with CorrelationId to show only first addition event
  | where OperationName1 =~ "Add service principal"
  | project TimeGenerated, GrantConsentType, GrantScope1, GrantInitiatedBy, AppDisplayName, AppReplyURLs, GrantIpAddress, GrantUserAgent, AppClientId, OperationName, ConsentFull
