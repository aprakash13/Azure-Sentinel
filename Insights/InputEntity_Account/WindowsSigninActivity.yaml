SchemaVersion: 1.0
DataTypes:
  - DataType: SecurityEvent
Type: KQL
Provider: Sentinel
BaseQuery: |
  let GetAllLogonsForUser = (v_Account_Name:string, v_Account_NTDomain:string){
  let AllEvents = SecurityEvent
  | extend p_Account_Name = case(
  // Handles mixed use scenario of NTDomain\AccountName@UPNSuffix
  v_Account_Name has '@' and v_Account_Name has '\\', tostring(split(tostring(split(v_Account_Name, '\\')[1]),'@')[0]),
  v_Account_Name has '@', tostring(split(v_Account_Name, '@')[0]),
  v_Account_Name has '\\', tostring(split(v_Account_Name, '\\')[1]),
  v_Account_Name
  )
  | extend p_Account_NTDomain = case(
  v_Account_NTDomain has '\\', tostring(split(v_Account_NTDomain, '\\')[0]), 
  // Handles UPN scenario of AccountName@UPNSuffix to pull potential NTDomain from
  v_Account_NTDomain has '@', tostring(split(tostring(split(v_Account_NTDomain, '@')[1]),'.')[0]),
  v_Account_NTDomain
  )
  | where EventID in (4624, 4625, 4672)
  | where AccountType =~ 'User'
  | where TargetUserName =~ p_Account_Name and TargetDomainName =~ p_Account_NTDomain
  | extend PassedInAccountName = p_Account_Name, PassedInNTDomain = p_Account_NTDomain, RelatedRowSet = 'AllEvents'
  | extend HourOfLogin = hourofday(TimeGenerated), DayNumberofWeek = dayofweek(TimeGenerated)
  | extend DayofWeek = case(
  DayNumberofWeek == "00:00:00", "Sunday", 
  DayNumberofWeek == "1.00:00:00", "Monday", 
  DayNumberofWeek == "2.00:00:00", "Tuesday", 
  DayNumberofWeek == "3.00:00:00", "Wednesday", 
  DayNumberofWeek == "4.00:00:00", "Thursday", 
  DayNumberofWeek == "5.00:00:00", "Friday", 
  DayNumberofWeek == "6.00:00:00", "Saturday","InvalidTimeStamp")
  // map the most common ntstatus codes
  | extend StatusDesc = case(
  Status =~ "0x80090302", "SEC_E_UNSUPPORTED_FUNCTION",
  Status =~ "0x80090308", "SEC_E_INVALID_TOKEN",
  Status =~ "0x8009030E", "SEC_E_NO_CREDENTIALS",
  Status =~ "0xC0000008", "STATUS_INVALID_HANDLE",
  Status =~ "0xC0000017", "STATUS_NO_MEMORY",
  Status =~ "0xC0000022", "STATUS_ACCESS_DENIED",
  Status =~ "0xC0000034", "STATUS_OBJECT_NAME_NOT_FOUND",
  Status =~ "0xC000005E", "STATUS_NO_LOGON_SERVERS",
  Status =~ "0xC000006A", "STATUS_WRONG_PASSWORD",
  Status =~ "0xC000006D", "STATUS_LOGON_FAILURE",
  Status =~ "0xC000006E", "STATUS_ACCOUNT_RESTRICTION",
  Status =~ "0xC0000073", "STATUS_NONE_MAPPED",
  Status =~ "0xC00000FE", "STATUS_NO_SUCH_PACKAGE",
  Status =~ "0xC000009A", "STATUS_INSUFFICIENT_RESOURCES",
  Status =~ "0xC00000DC", "STATUS_INVALID_SERVER_STATE",
  Status =~ "0xC0000106", "STATUS_NAME_TOO_LONG",
  Status =~ "0xC000010B", "STATUS_INVALID_LOGON_TYPE",
  Status =~ "0xC000015B", "STATUS_LOGON_TYPE_NOT_GRANTED",
  Status =~ "0xC000018B", "STATUS_NO_TRUST_SAM_ACCOUNT",
  Status =~ "0xC0000224", "STATUS_PASSWORD_MUST_CHANGE",
  Status =~ "0xC0000234", "STATUS_ACCOUNT_LOCKED_OUT",
  Status =~ "0xC00002EE", "STATUS_UNFINISHED_CONTEXT_DELETED",
  EventID == 4624 or EventID == 4672, "Success",
  "See - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55"
  )
  | extend SubStatusDesc = case(
  SubStatus =~ "0x80090325", "SEC_E_UNTRUSTED_ROOT",
  SubStatus =~ "0xC0000008", "STATUS_INVALID_HANDLE",
  SubStatus =~ "0xC0000022", "STATUS_ACCESS_DENIED",
  SubStatus =~ "0xC0000064", "STATUS_NO_SUCH_USER",
  SubStatus =~ "0xC000006A", "STATUS_WRONG_PASSWORD",
  SubStatus =~ "0xC000006D", "STATUS_LOGON_FAILURE",
  SubStatus =~ "0xC000006E", "STATUS_ACCOUNT_RESTRICTION",
  SubStatus =~ "0xC000006F", "STATUS_INVALID_LOGON_HOURS",
  SubStatus =~ "0xC0000070", "STATUS_INVALID_WORKSTATION",
  SubStatus =~ "0xC0000071", "STATUS_PASSWORD_EXPIRED",
  SubStatus =~ "0xC0000072", "STATUS_ACCOUNT_DISABLED",
  SubStatus =~ "0xC0000073", "STATUS_NONE_MAPPED",
  SubStatus =~ "0xC00000DC", "STATUS_INVALID_SERVER_STATE",
  SubStatus =~ "0xC0000133", "STATUS_TIME_DIFFERENCE_AT_DC",
  SubStatus =~ "0xC000018D", "STATUS_TRUSTED_RELATIONSHIP_FAILURE",
  SubStatus =~ "0xC0000193", "STATUS_ACCOUNT_EXPIRED",
  SubStatus =~ "0xC0000380", "STATUS_SMARTCARD_WRONG_PIN",
  SubStatus =~ "0xC0000381", "STATUS_SMARTCARD_CARD_BLOCKED",
  SubStatus =~ "0xC0000382", "STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED",
  SubStatus =~ "0xC0000383", "STATUS_SMARTCARD_NO_CARD",
  SubStatus =~ "0xC0000384", "STATUS_SMARTCARD_NO_KEY_CONTAINER",
  SubStatus =~ "0xC0000385", "STATUS_SMARTCARD_NO_CERTIFICATE",
  SubStatus =~ "0xC0000386", "STATUS_SMARTCARD_NO_KEYSET",
  SubStatus =~ "0xC0000387", "STATUS_SMARTCARD_IO_ERROR",
  SubStatus =~ "0xC0000388", "STATUS_DOWNGRADE_DETECTED",
  SubStatus =~ "0xC0000389", "STATUS_SMARTCARD_CERT_REVOKED",
  EventID == 4624 or EventID == 4672, "Success",
  "See - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55"
  )
  | project StartTime = TimeGenerated, DayofWeek, HourOfLogin, EventID, Activity, IpAddress, WorkstationName, Computer, TargetUserName, TargetDomainName, ProcessName, SubjectUserName, PrivilegeList, PassedInAccountName, PassedInNTDomain, LogonTypeName, StatusDesc, SubStatusDesc, RelatedRowSet 
  ;
  let UserSigninToSystems = AllEvents
  | where EventID == 4624
  | project-away StatusDesc, SubStatusDesc, PrivilegeList
  | summarize Total= count(), max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by EventID, Activity, TargetDomainName, TargetUserName , ProcessName , LogonTypeName
  | extend RelatedRowSet = 'UserSigninToSystems' ;
  let UserFailedSigninToSystems = AllEvents
  | where EventID == 4625
  | project-away PrivilegeList
  | summarize Total= count(), max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by EventID, Activity, TargetDomainName, TargetUserName , ProcessName , LogonTypeName
  | extend RelatedRowSet = 'UserFailedSigninToSystems' ;
  let UserSigninDuringAbnormalHours = AllEvents
  | where StartTime between (ago(14d)..ago(2d))
  | where EventID in (4624,4625)
  | where LogonTypeName in~ ('2 - Interactive','10 - RemoteInteractive')
  | summarize max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek) by TargetUserName
  | join kind= inner
  (
      AllEvents
      | where StartTime > ago(2d)
      | where LogonTypeName in~ ('2 - Interactive','10 - RemoteInteractive')
  )
  on TargetUserName
  | where HourOfLogin > max_HourOfLogin or HourOfLogin < min_HourOfLogin
  | extend historical_DayofWeek = tostring(historical_DayofWeek)
  | summarize Total= count(), max(HourOfLogin), min(HourOfLogin), current_DayofWeek =make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by EventID, Activity, TargetDomainName, TargetUserName , ProcessName , LogonTypeName, StatusDesc, SubStatusDesc, historical_DayofWeek
  | extend historical_DayofWeek = todynamic(historical_DayofWeek) 
  | extend RelatedRowSet = 'UserSigninDuringAbnormalHour'; 
  let UserHadPrivilegedLogonSessions = AllEvents
  | where EventID == 4672
  | where PrivilegeList contains 'SeDebugPrivilege'
  | project-away StatusDesc, SubStatusDesc
  | summarize Total= count(), max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by EventID, Activity, PrivilegeList
  | extend RelatedRowSet = 'UserHadPrivilegedLogonSessions' ;
  union isfuzzy=true AllEvents, UserSigninToSystems, UserFailedSigninToSystems, UserSigninDuringAbnormalHours, UserHadPrivilegedLogonSessions
  };
  // change {{Account_Name}} value below to the username you are interested in and {{Account_NTDomain}} to the domain of the user you are interested in
  GetAllLogonsForUser('{{Account_Name}}', '{{Account_NTDomain}}')
RequiredInputFieldsSets: 
 - - Account_Name
   - Account_NTDomain
Insights:
 Id: 8d209299-cb14-4f22-b5c5-6813f2d1ed2e
 DisplayName: Windows Sign-in Activity
 Description: |
   Summary of successful and failed sign-ins along with anamalous sign-in patterns for the specific user.
 DefaultTimeRange: 
   BeforeRange: 12h
   AfterRange: 12h
 TableQuery:
  ColumnsDefinitions:
  - Header: "Signin Type"
    OutputType: String
  - Header: TotalLogons
    OutputType: Number
    SupportDeepLink: true
  - Header: HostCount
    OutputType: Number
    SupportDeepLink: true
  QueriesDefinitions:

  # UserSigninToSystems
  - Filter:     "where RelatedRowSet =~ 'UserSigninToSystems' | extend NumberOfHostsLoggedOn = array_length(HostLoggedOn) "
    Summarize:  "summarize TotalLogons = sum(Total), HostCount = sum(NumberOfHostsLoggedOn)"
    Project:    "project Title = 'Successful Signins', TotalLogons, HostCount"
    LinkColumnsDefinitions:
      - ProjectedName: TotalLogons
        Query: "{{BaseQuery}} | {{RowFilter}}"
    LinkColumnsDefinitions:
      - ProjectedName: HostCount
        Query: "{{BaseQuery}} | {{RowFilter}}"

  # UserFailedSigninToSystems
  - Filter:     "where RelatedRowSet =~ 'UserFailedSigninToSystems'| extend NumberOfHostsLoggedOn = array_length(HostLoggedOn) "
    Summarize:  "summarize TotalLogons = sum(Total), HostCount = sum(NumberOfHostsLoggedOn)"
    Project:    "project Title = 'Failed Signins', TotalLogons, HostCount"
    LinkColumnsDefinitions:
      - ProjectedName: TotalLogons
        Query: "{{BaseQuery}} | {{RowFilter}}"
    LinkColumnsDefinitions:
      - ProjectedName: HostCount
        Query: "{{BaseQuery}} | {{RowFilter}}"

  # UserSigninDuringAbnormalHours
  - Filter:    "where RelatedRowSet =~ 'UserSigninDuringAbnormalHour' | extend NumberOfHostsLoggedOn = array_length(HostLoggedOn)"
    Summarize: "summarize TotalLogons = sum(Total), HostCount = sum(NumberOfHostsLoggedOn)"
    Project:   "project Title = 'Abnormal Time Signins', TotalLogons, HostCount"
    LinkColumnsDefinitions:
      - ProjectedName: TotalLogons
        Query: "{{BaseQuery}} | {{RowFilter}}"
    LinkColumnsDefinitions:
      - ProjectedName: HostCount
        Query: "{{BaseQuery}} | {{RowFilter}}"

  # UserHadPrivilegedLogonSessions
  - Filter:     "where RelatedRowSet =~ 'UserHadPrivilegedLogonSessions' | extend NumberOfHostsLoggedOn = array_length(HostLoggedOn) "
    Summarize:  "summarize TotalLogons = sum(Total), HostCount = sum(NumberOfHostsLoggedOn)"
    Project:    "project Title = 'Privileged Signins', TotalLogons, HostCount"
    LinkColumnsDefinitions:
      - ProjectedName: TotalLogons
        Query: "{{BaseQuery}} | {{RowFilter}}"
    LinkColumnsDefinitions:
      - ProjectedName: HostCount
        Query: "{{BaseQuery}} | {{RowFilter}}"


 ChartQuery: 
  Title: "Success vs Failed Logons over time"
  DataSets: 
   - Query: "summarize Count=countif(EventID==4624) by Time = bin(StartTime, 1h) | extend Legend = 'Success'"
     XColumnName: "Time"
     YColumnName: "Count"
     LegendColumnName: "Legend"
   - Query: "summarize Count=countif(EventID==4625) by Time = bin(StartTime, 1h) | extend Legend = 'Failed'"
     XColumnName: "Time"
     YColumnName: "Count"
     LegendColumnName: "Legend"
  Type: LineChart

 AdditionalQuery:
  Text: "See All Windows Logons"
  Query: "where RelatedRowSet =~ 'AllEvents' | where EventID in (4624,4625,4672) | extend SubjectUserName = columnifexists('SubjectUserName', 'EventDoesNotContain') | summarize Total= count(), max(HourOfLogin), min(HourOfLogin), historical_DayofWeek=make_set(DayofWeek), StartTime=max(StartTime), EndTime = min(StartTime), SourceIP = make_set(IpAddress), SourceHost = make_set(WorkstationName), SubjectUserName = make_set(SubjectUserName), HostLoggedOn = make_set(Computer) by Activity, TargetDomainName, TargetUserName, ProcessName, LogonTypeName | extend NumberOfHostsLoggedOn = array_length(HostLoggedOn)"
Activities:
     EnabledByDefault: true
     Title: "'{{LogonTypeName}}' log-ins to a host"
     Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
     Items:
        - Id: 0d4ec12e-e44a-40a4-bb87-3db84d2a8057
          Title: "'{{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's interactive log-ins grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet == 'UserSigninToSystems' and LogonTypeName == '2 - Interactive'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: c9da5786-6c3c-45b5-9a46-53200ed9df09
          Title: "'{{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's network log-ins, grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet == 'UserSigninToSystems' and LogonTypeName == '3 - Network'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: 8a302bfc-00e3-43b3-a516-102fd0cb0dbc
          Title: "'{{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's remote interactive log-ins, grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet == 'UserSigninToSystems' and LogonTypeName == '10 - RemoteInteractive'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: ec87b066-17ad-4f9b-97c2-c2f2ee2d99e0
          Title: "'{{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's log-ins with new credentials, grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet == 'UserSigninToSystems' and LogonTypeName == '9 - NewCredentials'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: e1c4c03c-2b40-47cf-9b8c-49e0a37a6da6
          Title: "'Privileged log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's privileged log-ins, grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet = 'UserHadPrivilegedLogonSessions'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: a6fc3ad9-1a61-41f5-a5e2-bd1f5a6fe44d
          Title: "'Failed {{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's failed interactive log-ins grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet =~ 'UserFailedSigninToSystems' and LogonTypeName == '2 - Interactive'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: 11449689-6542-4867-86dc-56264abbd90c
          Title: "'Failed {{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's failed network log-ins, grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet =~ 'UserFailedSigninToSystems' and LogonTypeName == '3 - Network'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
        - Id: 686cf7e8-87c7-4391-8898-25adf1033a54
          Title: "Failed '{{LogonTypeName}}' log-ins to a host"
          Content: "The user '{{v_Account_Name}}' failed to logged on to host '{{WorkstationName}}' '{{Count}}' times"
          Description: "This activity lists the user's failed remote interactive log-ins, grouped by Host."
          QueryDefinitions:
            Filter: "where RelatedRowSet =~ 'UserFailedSigninToSystems' and LogonTypeName == '10 - RemoteInteractive'"
            SummarizeBy: "Computer, WorkstationName, LogonTypeName"
