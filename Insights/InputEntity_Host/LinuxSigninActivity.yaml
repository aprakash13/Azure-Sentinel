SchemaVersion: '1.0'
Type: KQL
Provider: Sentinel
DataTypes:
  - DataType: Syslog
EntitiesFilter: {}
RequiredInputFieldsSets: 
  - - Host_HostName
BaseQuery: |
  let SigninResults = 
  Syslog 
  | where Facility =~ 'auth'
  | where SyslogMessage startswith 'Accepted' or SyslogMessage startswith 'Failed';
  let AllSigninResults = (v_Host_Name:string) 
  {
  let HostSpecificResults = SigninResults | where Computer == v_Host_Name;
  let AcceptedAuth = HostSpecificResults
  | where SyslogMessage startswith 'Accepted';
  let LongAuth = AcceptedAuth
  | where SyslogMessage has ':'
  | parse SyslogMessage with * 'Accepted ' LogonMethod ' for ' User ' from ' ExternalIP ' port ' Port ' ' ConnectionType ':' TrimExtra
  | project TimeGenerated = EventTime, HostName, HostIP, User, LogonMethod, ExternalIP, Port, ConnectionType, ProcessName, Result = 'SuccessfulSignin';
  let ShortAuth = AcceptedAuth
  | where SyslogMessage !has ':'
  | parse SyslogMessage with * 'Accepted ' LogonMethod ' for ' User ' from ' ExternalIP ' port ' Port ' ' ConnectionType
  | project TimeGenerated = EventTime, HostName, HostIP, User, LogonMethod, ExternalIP, Port, ConnectionType, ProcessName, Result = 'SuccessfulSignin';
  let InitialFailedAuth = HostSpecificResults
  | where SyslogMessage startswith 'Failed';
  let FailedAuth = InitialFailedAuth
  | where SyslogMessage !has 'invalid'
  | parse SyslogMessage with * 'Failed ' LogonMethod ' for ' User ' from ' ExternalIP ' port ' Port ' ' ConnectionType
  | project TimeGenerated = EventTime, HostName, HostIP, User, LogonMethod, ExternalIP, Port, ConnectionType, ProcessName, Result = 'FailedSignin';
  let ShortInvalidAuth = InitialFailedAuth
  | where SyslogMessage has 'invalid user from'
  | parse SyslogMessage with * 'Failed ' LogonMethod ' for invalid user from ' ExternalIP ' port ' Port ' ' ConnectionType
  | project TimeGenerated = EventTime, HostName, HostIP, User = ' ', LogonMethod, ExternalIP, Port, ConnectionType, ProcessName, Result = 'InvalidSignin';
  let LongInvalidAuth = InitialFailedAuth
  | where SyslogMessage has 'invalid' and SyslogMessage !has ' user from'
  | parse SyslogMessage with * 'Failed ' LogonMethod ' for invalid user ' User ' from ' ExternalIP ' port ' Port ' ' ConnectionType
  | project TimeGenerated = EventTime, HostName, HostIP, User, LogonMethod, ExternalIP, Port, ConnectionType, ProcessName, Result = 'InvalidSignin';
  union isfuzzy=true LongAuth, ShortAuth, FailedAuth, ShortInvalidAuth, LongInvalidAuth
  };
  AllSigninResults('{{Host_HostName}}')
Insights:
  Id: d4ca45db-254b-46f0-98fa-d1d104c26e0c
  DisplayName: Linux Signin Activity
  Description: |
    'Summary of successful, failed or invalid signins, along with most frequent and least frequent signins.'
  DefaultTimeRange:
     BeforeRange: 7d
     AfterRange: 7d
  SingleValuesQuery: {}
  TableQuery:
   ColumnsDefinitions:
   - Header: "Signin Result"
     OutputType: String
   - Header: "Signin Count"
     OutputType: Number
     SupportDeepLink: true
   - Header: "User Count"
     OutputType: Number
     SupportDeepLink: true
   - Header: "User(s)"
     OutputType: String
   QueriesDefinitions:
   # UserSigninsToHost
   - Filter:    "where Result == 'SuccessfulSignin'"
     Summarize: "summarize UserCount = dcount(User), Users = makeset(User), SigninCount = count() by HostName"
     Project:   "project Title = 'Success', SigninCount = case(UserCount == 0, 0, isempty(SigninCount), 0, SigninCount), UserCount, Users = case(UserCount == 1, tostring(Users[0]), UserCount > 1, 'Many', 'None')" 
   # UserFailedSigninsToHost
   - Filter:    "where Result == 'FailedSignin'"
     Summarize: "summarize UserCount = dcount(User), Users = makeset(User), SigninCount = count() by HostName"
     Project:   "project Title = 'Fail', SigninCount = case(UserCount == 0, 0, isempty(SigninCount), 0, SigninCount), UserCount, Users = case(UserCount == 1, tostring(Users[0]), UserCount > 1, 'Many', 'None')"
   # InvalidSigninsToHost
   - Filter:    "where Result == 'InvalidSignin'"
     Summarize: "summarize UserCount = dcount(User), Users = makeset(User), SigninCount = count() by HostName"
     Project:   "project Title = 'Invalid', SigninCount = case(UserCount == 0, 0, isempty(SigninCount), 0, SigninCount), UserCount, Users = case(UserCount == 1, tostring(Users[0]), UserCount > 1, 'Many', 'None')"
   # MostFrequent
   - Filter:    "where Result == 'SuccessfulSignin'"
     Summarize: "summarize StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SigninCount = count() by User | sort by SigninCount desc | top 1 by SigninCount"
     Project:   "project Title = 'Most Frequent', SigninCount, UserCount = 1, Users = User"
   # LeastFrequent
   - Filter:    "where Result == 'SuccessfulSignin'"
     Summarize: "summarize StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SigninCount = count() by User | sort by SigninCount asc | top 1 by SigninCount"
     Project:   "project Title = 'Least Frequent', SigninCount, UserCount = 1, Users = User"
  
  ChartQuery: 
   Title: "Signins over time"
   DataSets: 
    - Query: "where Result == 'SuccessfulSignin' | summarize SigninCount = count() by Time = bin(TimeGenerated, 1h) | extend Legend = 'Success'"
      XColumnName: Time
      YColumnName: SigninCount
      LegendColumnName: Legend
    - Query: "where Result == 'FailedSignin' | summarize SigninCount = count() by Time = bin(TimeGenerated, 1h) | extend Legend = 'Fail'"
      XColumnName: Time
      YColumnName: SigninCount
      LegendColumnName: Legend
    - Query: "where Result == 'InvalidSignin' | summarize SigninCount = count() by Time = bin(TimeGenerated, 1h) | extend Legend = 'Invalid'"
      XColumnName: Time
      YColumnName: SigninCount
      LegendColumnName: Legend
   Type: LineChart
  AdditionalQuery: 
   Text: "See all Linux signins"
   Query: "summarize StartTime=min(TimeGenerated), EndTime = max(TimeGenerated), SigninCount = count() by HostName, HostIP, User, LogonMethod, ExternalIP, Port, ConnectionType, ProcessName, Result"