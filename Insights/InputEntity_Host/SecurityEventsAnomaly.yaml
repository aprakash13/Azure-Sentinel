SchemaVersion: 1.0
DataTypes:
  - DataType: SecurityEvent
Provider: Sentinel
Type: KQL
EntitiesFilter: 
 Host_OsFamily:
  - Windows
BaseQuery: |
  let AScoreThresh=3; 
  let maxAnomalies=5; 
  let BeforeRange = 14d; 
  let EndTime = todatetime('{{End_Time_UTC}}');
  let StartTime = todatetime('{{Start_Time_UTC}}');  
  let numDays = tolong((EndTime-StartTime)/1d);
  let computerData = (v_Computer_Name:string) { SecurityEvent | where Computer  has v_Computer_Name };
  computerData('{{Host_HostName}}')
RequiredInputFieldsSets:
- - Host_HostName
Insights:
  Id: 4191a4d7-e72b-4564-b2fb-25580630384b
  DisplayName: Anomalously high number of a security event
  Description: Highlight security events of the host with anomalously high count compared to those observed in the preceding 14 days.
  DefaultTimeRange:
    BeforeRange: 14d
    AfterRange: 0d
  TableQuery:
    ColumnsDefinitions:
    - Header: Activity
      OutputType: String
      SupportDeepLink: true
    - Header: Expected Count
      OutputType: Number
      SupportDeepLink: false
    - Header: Actual Count
      OutputType: Number
      SupportDeepLink: false
    QueriesDefinitions:
    - Filter: |
       make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by Activity
       | extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey')
       | extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore
       | mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime),  maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime))
       | extend count1=count_
       | mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) )
       | where totAnomalies < maxAnomalies        
       | extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount)
       | where maxAnomalyScorePost > AScoreThresh 
       | order by maxAnomalyScorePost desc 

      Summarize: take 1
      Project: project Activity, expectedCount=postExpectedCount, actualCount=postActualCount, anomalyScore=postAnomalyScore
      LinkColumnsDefinitions:
      - ProjectedName: Activity
        Query: |
         {{BaseQuery}} 
         | where TimeGenerated between (StartTime .. EndTime) 
         | where Activity == '{{RowValue_Activity}}'
  ChartQuery:
    Title: Anomalous activity timeline
    DataSets:
    - Query: |
       make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by Activity
       | extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey')
       | extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore
       | mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime))
       | extend count1=count_
       | mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) )
       | where totAnomalies < maxAnomalies        
       | extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount)
       | where maxAnomalyScorePost > AScoreThresh 
       | order by maxAnomalyScorePost desc 
       | take 1 
       | project Activity, TimeGenerated, count_ 
       | mvexpand TimeGenerated, count_ 
       | project todatetime(TimeGenerated), toint(count_), Activity

      XColumnName: TimeGenerated
      YColumnName: count_
      LegendColumnName: Activity
    Type: LineChart
  AdditionalQuery:
    Text: Query all anomalous activities
    Query: |
       make-series count() default=0 on TimeGenerated from (StartTime - BeforeRange) to EndTime step 1d by Activity
       | extend (anomalies,anomalyScore, expectedCount)=series_decompose_anomalies(count_,AScoreThresh,7,'linefit',numDays, 'ctukey')
       | extend count1=count_, TimeGenerated1=TimeGenerated, anomalyScore1=anomalyScore
       | mv-apply count1 to typeof(long), TimeGenerated1 to typeof(datetime), anomalyScore1 to typeof(double), anomalies to typeof(long) on (summarize totAnomalies=sumif(abs(anomalies), TimeGenerated1 < StartTime), baseStd=stdevif(count1, TimeGenerated1 < StartTime), baseAvg=avgif(count1, TimeGenerated1 < StartTime), maxCountPost=maxif(count1,TimeGenerated1 >= StartTime), maxAnomalyScorePost = maxif(anomalyScore1, TimeGenerated1 >= StartTime))
       | extend count1=count_
       | mv-apply  count1 to typeof(long), anomalyScore to typeof(double), expectedCount to typeof(double) on ( summarize (dummy, postExpectedCount, postActualCount)=arg_min(abs(anomalyScore - maxAnomalyScorePost), expectedCount, count1) )
       | where totAnomalies < maxAnomalies      
       | extend postAnomalyScore=iff(baseStd == 0 and maxCountPost > tolong(count_[0]),1000.0,maxAnomalyScorePost), postExpectedCount=iff(postExpectedCount < 0,0.0,postExpectedCount)
       | where maxAnomalyScorePost > AScoreThresh 
       | order by maxAnomalyScorePost desc 
       | project Activity, expectedCount=postExpectedCount, actualCount=postActualCount, anomalyScore=postAnomalyScore