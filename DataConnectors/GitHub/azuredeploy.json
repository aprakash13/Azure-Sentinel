{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "AuditPlaybookName": {
            "defaultValue": "Get-GitHubAuditEntry",
            "type": "String"
        },
        "RepoPlaybookName": {
            "defaultValue": "Get-GitHubRepoLogs",
            "type": "String"
        },
        "VulnerabilityAlertPlaybookName": {
            "defaultValue": "Get-GitHubVulnerabilityAlerts",
            "type": "String"
        },
        "PersonalAccessToken": {
            "defaultValue": "Enter the personal access token",
            "type": "string"
        },
        "UserName": {
            "defaultValue": "<username>@<domain>",
            "type": "string"
        },
        "principalId": {
            "defaultValue": "Enter the object ID of the user entered above",
            "type": "string"
        },
        "workspaceId": {
            "type": "string"
        },
        "workSpaceKey": {
            "type": "string"
        }
    },
    "variables": {
        "KeyVaultName": "[tolower(concat('githubkv', uniqueString(resourceGroup().id, subscription().id)))]",
        "SecretName": "PersonalAccessToken",
        "StorageAccountName": "[tolower(concat('githubsa', uniqueString(resourceGroup().id, subscription().id)))]",
        "StorageContainerName": "githublogicapp",
        "AzureBlobConnectionName": "azureblob-GitHubPlaybooks",
        "AzureLogAnalyticsDataCollectorConnectionName": "azureloganalyticsdatacollector-GitHubPlaybooks",
        "KeyVaultConnectionName": "keyvault-GitHubPlaybooks"

    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2016-10-01",
            "name": "[variables('KeyVaultName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('principalId')]",
                        "permissions": {
                            "keys": [
                            ],
                            "secrets": [
                                "Get",
                                "List"
                            ],
                            "certificates": [
                            ]
                        }
                    }
                ],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2016-10-01",
            "name": "[concat(variables('KeyVaultName'), '/', variables('SecretName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('KeyVaultName'))]"
            ],
            "properties": {
                "value": "[parameters('PersonalAccessToken')]",
                "contentType": "string",
                "attributes": {
                    "enabled": true
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('StorageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "largeFileSharesState": "Disabled",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                    ],
                    "ipRules": [
                    ],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('StorageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": [
                    ]
                },
                "deleteRetentionPolicy": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('StorageAccountName'), '/default/githublogicapp')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('StorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "properties": {
                "publicAccess": "None"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureBlobConnectionName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "properties": {
                "displayName": "github",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                },
                "parameterValues": {
                    "accountname": "[variables('AzureBlobConnectionName')]",
                    "accesskey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2019-06-01').keys[0].value]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureLogAnalyticsDataCollectorConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "github",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                },
                "parameterValues": {
                    "username": "[parameters('workspaceId')]",
                    "password": "[parameters('workSpaceKey')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('KeyVaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[parameters('UserName')]",
                "customParameterValues": {
                },
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                },
                "parameterValues": {
                    "token:TenantId": "[subscription().tenantId]",
                    "token:grantType": "code",
                    "vaultName": "[variables('KeyVaultName')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('AuditPlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('StorageAccountName'), 'default', 'githublogicapp')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KeyVaultName'), variables('SecretName'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {
                            },
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@body('Parse_JSON_3')",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Set_variable": {
                                            "runAfter": {
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "AuditQuery",
                                                "value": "{\"query\": \"query { organization(login: \\\"@{variables('OrgName')}\\\") { auditLog(first: 100 orderBy: { direction: ASC field: CREATED_AT }) { edges { node { ... on AuditEntry { action actor actorIp actorLocation { city country countryCode region regionCode } actorLogin actorResourcePath actorUrl createdAt operationType user { email } userLogin userResourcePath } ... on MembersCanDeleteReposClearAuditEntry { organizationName enterpriseSlug } ... on MembersCanDeleteReposDisableAuditEntry { organizationName enterpriseSlug } ... on MembersCanDeleteReposEnableAuditEntry { organizationName enterpriseSlug } ... on OauthApplicationCreateAuditEntry { applicationUrl oauthApplicationName organizationName state } ... on OrgAddBillingManagerAuditEntry { invitationEmail organizationName } ... on OrgAddMemberAuditEntry { organizationName permission } ... on OrgBlockUserAuditEntry { organizationName blockedUserName } ... on OrgConfigDisableCollaboratorsOnlyAuditEntry { organizationName } ... on OrgConfigEnableCollaboratorsOnlyAuditEntry { organizationName } ... on OrgCreateAuditEntry { organizationName } ... on OrgDisableOauthAppRestrictionsAuditEntry { organizationName } ... on OrgDisableSamlAuditEntry { organizationName } ... on OrgDisableTwoFactorRequirementAuditEntry { organizationName } ... on OrgEnableOauthAppRestrictionsAuditEntry { organizationName } ... on OrgEnableSamlAuditEntry { organizationName } ... on OrgEnableTwoFactorRequirementAuditEntry { organizationName } ... on OrgInviteMemberAuditEntry { email organizationName } ... on OrgInviteToBusinessAuditEntry { organizationName enterpriseSlug } ... on OrgOauthAppAccessApprovedAuditEntry { oauthApplicationName oauthApplicationUrl organizationName } ... on OrgOauthAppAccessDeniedAuditEntry { oauthApplicationName oauthApplicationUrl organizationName } ... on OrgOauthAppAccessRequestedAuditEntry { oauthApplicationName oauthApplicationUrl organizationName } ... on OrgRemoveBillingManagerAuditEntry { organizationName reason } ... on OrgRemoveMemberAuditEntry { organizationName membershipTypes reason } ... on OrgRemoveOutsideCollaboratorAuditEntry { organizationName membershipTypes reason } ... on OrgRestoreMemberAuditEntry { organizationName restoredMembershipsCount restoredRepositoriesCount restoredMemberships { ... on OrgRestoreMemberMembershipOrganizationAuditEntryData { organizationName } ... on OrgRestoreMemberMembershipRepositoryAuditEntryData { repositoryName } ... on OrgRestoreMemberMembershipTeamAuditEntryData { teamName } } } ... on OrgUnblockUserAuditEntry { blockedUserName organizationName } ... on OrgUpdateDefaultRepositoryPermissionAuditEntry { organizationName permission permissionWas } ... on OrgUpdateMemberAuditEntry { organizationName permission permissionWas } ... on OrgUpdateMemberRepositoryCreationPermissionAuditEntry { canCreateRepositories organizationName visibility } ... on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry { canInviteOutsideCollaboratorsToRepositories organizationName } ... on PrivateRepositoryForkingDisableAuditEntry { enterpriseSlug organizationName repositoryName } ... on PrivateRepositoryForkingEnableAuditEntry { enterpriseSlug organizationName repositoryName } ... on RepoAccessAuditEntry { organizationName repositoryName visibility } ... on RepoAddMemberAuditEntry { organizationName repositoryName visibility } ... on RepoAddTopicAuditEntry { organizationName repositoryName topicName } ... on RepoArchivedAuditEntry { organizationName repositoryName visibility } ... on RepoChangeMergeSettingAuditEntry { isEnabled mergeType organizationName repositoryName } ... on RepoConfigDisableAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoConfigDisableCollaboratorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigDisableContributorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigDisableSockpuppetDisallowedAuditEntry { organizationName repositoryName } ... on RepoConfigEnableAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoConfigEnableCollaboratorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigEnableContributorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigEnableSockpuppetDisallowedAuditEntry { organizationName repositoryName } ... on RepoConfigLockAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoConfigUnlockAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoCreateAuditEntry { forkParentName forkSourceName organizationName repositoryName visibility } ... on RepoDestroyAuditEntry { organizationName repositoryName visibility } ... on RepoRemoveMemberAuditEntry { organizationName repositoryName visibility } ... on RepoRemoveTopicAuditEntry { organizationName repositoryName topicName } ... on RepositoryVisibilityChangeDisableAuditEntry { enterpriseSlug organizationName } ... on RepositoryVisibilityChangeEnableAuditEntry { enterpriseSlug organizationName } ... on TeamAddMemberAuditEntry { isLdapMapped organizationName teamName } ... on TeamAddRepositoryAuditEntry { isLdapMapped organizationName repositoryName teamName } ... on TeamChangeParentTeamAuditEntry { organizationName parentTeamName parentTeamNameWas teamName } ... on TeamRemoveMemberAuditEntry { isLdapMapped organizationName teamName } ... on TeamRemoveRepositoryAuditEntry { isLdapMapped organizationName repositoryName teamName } } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } } } }\"}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Set_variable_2": {
                                                "runAfter": {
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "lastContext",
                                                    "value": "@body('Parse_JSON')?['lastContext']"
                                                }
                                            },
                                            "Set_variable_3": {
                                                "runAfter": {
                                                    "Set_variable_2": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "AuditQuery",
                                                    "value": "{\"query\": \"query { organization(login: \\\"@{variables('OrgName')}\\\") { auditLog(first: 100 orderBy: { direction: ASC field: CREATED_AT } after: \\\"@{variables('lastContext')}\\\") { edges { node { ... on AuditEntry { action actor actorIp actorLocation { city country countryCode region regionCode } actorLogin actorResourcePath actorUrl createdAt operationType user { email } userLogin userResourcePath } ... on MembersCanDeleteReposClearAuditEntry { organizationName enterpriseSlug } ... on MembersCanDeleteReposDisableAuditEntry { organizationName enterpriseSlug } ... on MembersCanDeleteReposEnableAuditEntry { organizationName enterpriseSlug } ... on OauthApplicationCreateAuditEntry { applicationUrl oauthApplicationName organizationName state } ... on OrgAddBillingManagerAuditEntry { invitationEmail organizationName } ... on OrgAddMemberAuditEntry { organizationName permission } ... on OrgBlockUserAuditEntry { organizationName blockedUserName } ... on OrgConfigDisableCollaboratorsOnlyAuditEntry { organizationName } ... on OrgConfigEnableCollaboratorsOnlyAuditEntry { organizationName } ... on OrgCreateAuditEntry { organizationName } ... on OrgDisableOauthAppRestrictionsAuditEntry { organizationName } ... on OrgDisableSamlAuditEntry { organizationName } ... on OrgDisableTwoFactorRequirementAuditEntry { organizationName } ... on OrgEnableOauthAppRestrictionsAuditEntry { organizationName } ... on OrgEnableSamlAuditEntry { organizationName } ... on OrgEnableTwoFactorRequirementAuditEntry { organizationName } ... on OrgInviteMemberAuditEntry { email organizationName } ... on OrgInviteToBusinessAuditEntry { organizationName enterpriseSlug } ... on OrgOauthAppAccessApprovedAuditEntry { oauthApplicationName oauthApplicationUrl organizationName } ... on OrgOauthAppAccessDeniedAuditEntry { oauthApplicationName oauthApplicationUrl organizationName } ... on OrgOauthAppAccessRequestedAuditEntry { oauthApplicationName oauthApplicationUrl organizationName } ... on OrgRemoveBillingManagerAuditEntry { organizationName reason } ... on OrgRemoveMemberAuditEntry { organizationName membershipTypes reason } ... on OrgRemoveOutsideCollaboratorAuditEntry { organizationName membershipTypes reason } ... on OrgRestoreMemberAuditEntry { organizationName restoredMembershipsCount restoredRepositoriesCount restoredMemberships { ... on OrgRestoreMemberMembershipOrganizationAuditEntryData { organizationName } ... on OrgRestoreMemberMembershipRepositoryAuditEntryData { repositoryName } ... on OrgRestoreMemberMembershipTeamAuditEntryData { teamName } } } ... on OrgUnblockUserAuditEntry { blockedUserName organizationName } ... on OrgUpdateDefaultRepositoryPermissionAuditEntry { organizationName permission permissionWas } ... on OrgUpdateMemberAuditEntry { organizationName permission permissionWas } ... on OrgUpdateMemberRepositoryCreationPermissionAuditEntry { canCreateRepositories organizationName visibility } ... on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry { canInviteOutsideCollaboratorsToRepositories organizationName } ... on PrivateRepositoryForkingDisableAuditEntry { enterpriseSlug organizationName repositoryName } ... on PrivateRepositoryForkingEnableAuditEntry { enterpriseSlug organizationName repositoryName } ... on RepoAccessAuditEntry { organizationName repositoryName visibility } ... on RepoAddMemberAuditEntry { organizationName repositoryName visibility } ... on RepoAddTopicAuditEntry { organizationName repositoryName topicName } ... on RepoArchivedAuditEntry { organizationName repositoryName visibility } ... on RepoChangeMergeSettingAuditEntry { isEnabled mergeType organizationName repositoryName } ... on RepoConfigDisableAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoConfigDisableCollaboratorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigDisableContributorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigDisableSockpuppetDisallowedAuditEntry { organizationName repositoryName } ... on RepoConfigEnableAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoConfigEnableCollaboratorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigEnableContributorsOnlyAuditEntry { organizationName repositoryName } ... on RepoConfigEnableSockpuppetDisallowedAuditEntry { organizationName repositoryName } ... on RepoConfigLockAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoConfigUnlockAnonymousGitAccessAuditEntry { organizationName repositoryName } ... on RepoCreateAuditEntry { forkParentName forkSourceName organizationName repositoryName visibility } ... on RepoDestroyAuditEntry { organizationName repositoryName visibility } ... on RepoRemoveMemberAuditEntry { organizationName repositoryName visibility } ... on RepoRemoveTopicAuditEntry { organizationName repositoryName topicName } ... on RepositoryVisibilityChangeDisableAuditEntry { enterpriseSlug organizationName } ... on RepositoryVisibilityChangeEnableAuditEntry { enterpriseSlug organizationName } ... on TeamAddMemberAuditEntry { isLdapMapped organizationName teamName } ... on TeamAddRepositoryAuditEntry { isLdapMapped organizationName repositoryName teamName } ... on TeamChangeParentTeamAuditEntry { organizationName parentTeamName parentTeamNameWas teamName } ... on TeamRemoveMemberAuditEntry { isLdapMapped organizationName teamName } ... on TeamRemoveRepositoryAuditEntry { isLdapMapped organizationName repositoryName teamName } } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } } } }\"}"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@body('Parse_JSON')?['lastContext']",
                                                    ""
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Get_blob_content_3": {
                                    "runAfter": {
                                        "Set_variable_7": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/lastrun-Audit.json'))}/content",
                                        "queries": {
                                            "inferContentType": true
                                        }
                                    }
                                },
                                "Parse_JSON": {
                                    "runAfter": {
                                        "Get_blob_content_3": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@json(body('Get_blob_content_3'))",
                                        "schema": {
                                            "properties": {
                                                "lastContext": {
                                                    "type": "string"
                                                },
                                                "lastRun": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Set_variable_7": {
                                    "runAfter": {
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "OrgName",
                                        "value": "@items('For_each')['org']"
                                    }
                                },
                                "Until": {
                                    "actions": {
                                        "Condition_2": {
                                            "actions": {
                                                "Update_blob": {
                                                    "runAfter": {
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "{\n  \"lastRun\": \"@{utcNow()}\",\n  \"lastContext\": \"@{variables('lastContext')}\"\n}",
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "put",
                                                        "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/lastrun-Audit.json='))}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Set_variable_5": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Set_variable_4": {
                                                        "runAfter": {
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "AuditQuery",
                                                            "value": "{\"query\": \"{organization(login:\\\"@{variables('OrgName')}\\\") {auditLog(first: 100 orderBy: {direction: ASC field: CREATED_AT} after: \\\"@{body('Parse_JSON_2')?['data']?['organization']?['auditLog']?['pageInfo']?['endCursor']}\\\"){edges{node{... on AuditEntry {action actorIp actorLocation {city country countryCode region regionCode} actorLogin actorResourcePath actorUrl createdAt operationType user {email} userLogin userResourcePath}}}pageInfo {endCursor hasNextPage hasPreviousPage startCursor}}}}\"}"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@body('Parse_JSON_2')?['data']?['organization']?['auditLog']?['pageInfo']?['hasNextPage']",
                                                            "@false"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Condition_3": {
                                            "actions": {
                                                "Send_Data": {
                                                    "runAfter": {
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "@{body('Parse_JSON_2')?['data']?['organization']?['auditLog']?['edges']}",
                                                        "headers": {
                                                            "Log-Type": "GitHub"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/api/logs"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@length(body('Parse_JSON_2')?['data']?['organization']?['auditLog']?['edges'])",
                                                                0
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "HTTP": {
                                            "runAfter": {
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "body": "@variables('AuditQuery')",
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "POST",
                                                "uri": "https://api.github.com/graphql"
                                            }
                                        },
                                        "Parse_JSON_2": {
                                            "runAfter": {
                                                "HTTP": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP')",
                                                "schema": {
                                                    "properties": {
                                                        "data": {
                                                            "properties": {
                                                                "organization": {
                                                                    "properties": {
                                                                        "auditLog": {
                                                                            "properties": {
                                                                                "edges": {
                                                                                    "items": {
                                                                                        "properties": {
                                                                                            "node": {
                                                                                                "properties": {
                                                                                                    "createdAt": {
                                                                                                        "type": [
                                                                                                            "string",
                                                                                                            "null"
                                                                                                        ]
                                                                                                    }
                                                                                                },
                                                                                                "type": "object"
                                                                                            }
                                                                                        },
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                },
                                                                                "pageInfo": {
                                                                                    "properties": {
                                                                                        "endCursor": {
                                                                                            "type": [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        },
                                                                                        "hasNextPage": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "hasPreviousPage": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "startCursor": {
                                                                                            "type": [
                                                                                                "string",
                                                                                                "null"
                                                                                            ]
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Set_variable_5": {
                                            "runAfter": {
                                                "Set_variable_6": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "lastContext",
                                                "value": "@{body('Parse_JSON_2')?['data']?['organization']?['auditLog']?['pageInfo']?['endCursor']}"
                                            }
                                        },
                                        "Set_variable_6": {
                                            "runAfter": {
                                                "Condition_3": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "hasNextPage",
                                                "value": "@body('Parse_JSON_2')?['data']?['organization']?['auditLog']?['pageInfo']?['hasNextPage']"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                    },
                                    "expression": "@equals(variables('hasNextPage'), false)",
                                    "limit": {
                                        "count": 60,
                                        "timeout": "PT1H"
                                    },
                                    "type": "Until"
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_3": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Get_blob_content": {
                            "runAfter": {
                                "Get_secret": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/ORGS.json'))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            }
                        },
                        "Get_secret": {
                            "runAfter": {
                                "Initialize_variable_4": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "[concat('/secrets/@{encodeURIComponent(''', variables('SecretName'), ''')}/value')]"
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "AuditQuery",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OrgName",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_3": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "lastContext",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_4": {
                            "runAfter": {
                                "Initialize_variable_3": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "hasNextPage",
                                        "type": "boolean",
                                        "value": true
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_3": {
                            "runAfter": {
                                "Get_blob_content": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@json(body('Get_blob_content'))",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "org": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "org"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                                "connectionName": "variables('AzureBlobConnectionName')",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                                "connectionName": "[variables('AzureLogAnalyticsDataCollectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "keyvault_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                                "connectionName": "[variables('KeyVaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('RepoPlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('StorageAccountName'), 'default', 'githublogicapp')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KeyVaultName'), variables('SecretName'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {
                            },
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "For_each_6": {
                            "foreach": "@body('Parse_JSON_6')",
                            "actions": {
                                "For_each": {
                                    "foreach": "@body('Parse_JSON')",
                                    "actions": {
                                        "For_each_2": {
                                            "foreach": "@body('Parse_JSON_4')",
                                            "actions": {
                                                "Append_to_array_variable": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Referrers",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_2'), 'Repository', items('For_each')['name']), 'LogType', 'Referrers'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_4": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_3": {
                                            "foreach": "@body('Parse_JSON_5')",
                                            "actions": {
                                                "Append_to_array_variable_2": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Paths",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_3'), 'Repository', items('For_each')['name']), 'LogType', 'Paths'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_5": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_4": {
                                            "foreach": "@body('Parse_JSON_2')?['views']",
                                            "actions": {
                                                "Append_to_array_variable_3": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Paths",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_4'), 'Repository', items('For_each')['name']), 'LogType', 'Views'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_5": {
                                            "foreach": "@body('Parse_JSON_3')?['clones']",
                                            "actions": {
                                                "Append_to_array_variable_4": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Clones",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_5'), 'Repository', items('For_each')['name']), 'LogType', 'Clones'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_3": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_7": {
                                            "foreach": "@body('Parse_JSON_8')",
                                            "actions": {
                                                "Append_to_array_variable_6": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Collaborators",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_7'), 'Repository', items('For_each')['name']), 'LogType', 'Collaborators'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_8": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_8": {
                                            "foreach": "@body('Parse_JSON_7')",
                                            "actions": {
                                                "Append_to_array_variable_5": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Commits",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_8'), 'Repository', items('For_each')['name']), 'LogType', 'Commits'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_7": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "For_each_9": {
                                            "foreach": "@body('Parse_JSON_9')",
                                            "actions": {
                                                "Append_to_array_variable_7": {
                                                    "runAfter": {
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "Forks",
                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_9'), 'Repository', items('For_each')['name']), 'LogType', 'Forks'), 'Organization', variables('OrgName'))"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_JSON_9": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        },
                                        "HTTP_2": {
                                            "runAfter": {
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/traffic/popular/referrers"
                                            }
                                        },
                                        "HTTP_3": {
                                            "runAfter": {
                                                "Send_Data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/traffic/popular/paths"
                                            }
                                        },
                                        "HTTP_4": {
                                            "runAfter": {
                                                "Send_Data_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/traffic/views"
                                            }
                                        },
                                        "HTTP_5": {
                                            "runAfter": {
                                                "Send_Data_3": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/traffic/clones"
                                            }
                                        },
                                        "HTTP_6": {
                                            "runAfter": {
                                                "Send_Data_4": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/commits"
                                            }
                                        },
                                        "HTTP_7": {
                                            "runAfter": {
                                                "Send_Data_5": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/collaborators"
                                            }
                                        },
                                        "HTTP_8": {
                                            "runAfter": {
                                                "Send_Data_6": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Http",
                                            "inputs": {
                                                "headers": {
                                                    "Authorization": "bearer @{body('Get_secret')?['value']}",
                                                    "Content-Type": "application/json"
                                                },
                                                "method": "GET",
                                                "uri": "https://api.github.com/repos/@{variables('OrgName')}/@{items('For_each')['name']}/forks"
                                            }
                                        },
                                        "Parse_JSON_2": {
                                            "runAfter": {
                                                "HTTP_4": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_4')",
                                                "schema": {
                                                    "properties": {
                                                        "views": {
                                                            "items": {
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Parse_JSON_3": {
                                            "runAfter": {
                                                "HTTP_5": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_5')",
                                                "schema": {
                                                    "properties": {
                                                        "clones": {
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "Parse_JSON_4": {
                                            "runAfter": {
                                                "HTTP_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_2')",
                                                "schema": {
                                                    "items": {
                                                        "properties": {
                                                            "count": {
                                                                "type": "integer"
                                                            },
                                                            "referrer": {
                                                                "type": "string"
                                                            },
                                                            "uniques": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            }
                                        },
                                        "Parse_JSON_5": {
                                            "runAfter": {
                                                "HTTP_3": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_3')",
                                                "schema": {
                                                    "items": {
                                                        "properties": {
                                                            "count": {
                                                                "type": "integer"
                                                            },
                                                            "path": {
                                                                "type": "string"
                                                            },
                                                            "title": {
                                                                "type": "string"
                                                            },
                                                            "uniques": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            }
                                        },
                                        "Parse_JSON_7": {
                                            "runAfter": {
                                                "HTTP_6": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_6')",
                                                "schema": {
                                                    "items": {
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            }
                                        },
                                        "Parse_JSON_8": {
                                            "runAfter": {
                                                "HTTP_7": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_7')",
                                                "schema": {
                                                    "items": {
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            }
                                        },
                                        "Parse_JSON_9": {
                                            "runAfter": {
                                                "HTTP_8": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@body('HTTP_8')",
                                                "schema": {
                                                    "items": {
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            }
                                        },
                                        "Send_Data": {
                                            "runAfter": {
                                                "For_each_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@{variables('Referrers')}",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        },
                                        "Send_Data_2": {
                                            "runAfter": {
                                                "For_each_3": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('Paths')",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        },
                                        "Send_Data_3": {
                                            "runAfter": {
                                                "For_each_4": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('Views')",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        },
                                        "Send_Data_4": {
                                            "runAfter": {
                                                "For_each_5": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('Clones')",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        },
                                        "Send_Data_5": {
                                            "runAfter": {
                                                "For_each_8": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('Commits')",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        },
                                        "Send_Data_6": {
                                            "runAfter": {
                                                "For_each_7": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('Collaborators')",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        },
                                        "Send_Data_7": {
                                            "runAfter": {
                                                "For_each_9": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@variables('Forks')",
                                                "headers": {
                                                    "Log-Type": "GitHubRepoLogs"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "HTTP": {
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Authorization": "bearer @{body('Get_secret')?['value']}",
                                            "Content-Type": "application/json"
                                        },
                                        "method": "GET",
                                        "uri": "https://api.github.com/orgs/@{variables('OrgName')}/repos"
                                    }
                                },
                                "Parse_JSON": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP')",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    }
                                },
                                "Set_variable": {
                                    "runAfter": {
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "OrgName",
                                        "value": "@items('For_each_6')['org']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON_6": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Get_blob_content": {
                            "runAfter": {
                                "Get_secret": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/ORGS.json'))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            }
                        },
                        "Get_secret": {
                            "runAfter": {
                                "Initialize_variable_8": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "[concat('/secrets/@{encodeURIComponent(''', variables('SecretName'), ''')}/value')]"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OrgName",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Referrers",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_3": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Paths",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_4": {
                            "runAfter": {
                                "Initialize_variable_3": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Views",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_5": {
                            "runAfter": {
                                "Initialize_variable_4": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Clones",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_6": {
                            "runAfter": {
                                "Initialize_variable_5": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Commits",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_7": {
                            "runAfter": {
                                "Initialize_variable_6": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Collaborators",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_8": {
                            "runAfter": {
                                "Initialize_variable_7": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Forks",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Parse_JSON_6": {
                            "runAfter": {
                                "Get_blob_content": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@json(body('Get_blob_content'))",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "org": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "org"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                                "connectionName": "[variables('AzureBlobConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                                "connectionName": "[variables('AzureLogAnalyticsDataCollectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                                "connectionName": "[variables('KeyVaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('VulnerabilityAlertPlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('StorageAccountName'), 'default', 'githublogicapp')]",
                "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('KeyVaultName'), variables('SecretName'))]"
            ],
            "properties": {
                "state": "Disabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {
                            },
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Day",
                                "interval": 1
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@body('Parse_JSON')",
                            "actions": {
                                "For_each_2": {
                                    "foreach": "@body('Parse_JSON_2')",
                                    "actions": {
                                        "Condition": {
                                            "actions": {
                                                "Create_blob": {
                                                    "runAfter": {
                                                        "Set_variable_3": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "{\"lastcontext\": \"\", \"lastrun\":\"\"}",
                                                        "headers": {
                                                            "Content-Type": "application/json"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/datasets/default/files",
                                                        "queries": {
                                                            "folderPath": "/githublogicapp",
                                                            "name": "lastrun-@{variables('OrgName')}​-@{variables('RepoName')}​.json",
                                                            "queryParametersSingleEncoded": true
                                                        }
                                                    },
                                                    "runtimeConfiguration": {
                                                        "contentTransfer": {
                                                            "transferMode": "Chunked"
                                                        }
                                                    }
                                                },
                                                "Set_variable_3": {
                                                    "runAfter": {
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "vulnerabilityAlertsQuery",
                                                        "value": "{\"query\": \"query {organization(login: \\\"@{variables('OrgName')}\\\") {repository(name: \\\"@{variables('RepoName')}\\\") { vulnerabilityAlerts(first: 100) { nodes { createdAt dismissReason dismissedAt id vulnerableManifestFilename vulnerableManifestPath vulnerableRequirements securityAdvisory { databaseId description ghsaId id origin permalink publishedAt severity summary withdrawnAt } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } } } } }\"}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Filter_array": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "else": {
                                                "actions": {
                                                    "Get_blob_content_2": {
                                                        "runAfter": {
                                                        },
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                }
                                                            },
                                                            "method": "get",
                                                            "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/lastrun-',variables('OrgName'),'-',variables('RepoName'),'.json'))}/content",
                                                            "queries": {
                                                                "inferContentType": true
                                                            }
                                                        }
                                                    },
                                                    "Parse_JSON_3": {
                                                        "runAfter": {
                                                            "Get_blob_content_2": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "ParseJson",
                                                        "inputs": {
                                                            "content": "@json(body('Get_blob_content_2'))",
                                                            "schema": {
                                                                "properties": {
                                                                    "lastContext": {
                                                                        "type": "string"
                                                                    },
                                                                    "lastRun": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        }
                                                    },
                                                    "Set_variable_4": {
                                                        "runAfter": {
                                                            "Parse_JSON_3": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "lastContext",
                                                            "value": "@body('Parse_JSON_3')?['lastContext']"
                                                        }
                                                    },
                                                    "Set_variable_5": {
                                                        "runAfter": {
                                                            "Set_variable_4": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "vulnerabilityAlertsQuery",
                                                            "value": "{\"query\": \"query {organization(login: \\\"@{variables('OrgName')}\\\") {repository(name: \\\"@{variables('RepoName')}\\\") { vulnerabilityAlerts(first: 100, after: \\\"@{variables('lastContext')}\\\") { nodes { createdAt dismissReason dismissedAt id vulnerableManifestFilename vulnerableManifestPath vulnerableRequirements securityAdvisory { databaseId description ghsaId id origin permalink publishedAt severity summary withdrawnAt } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } } } } }\"}"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@empty(body('Filter_array'))",
                                                            "@true"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Filter_array": {
                                            "runAfter": {
                                                "Set_variable_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('List_blobs')?['value']",
                                                "where": "@equals(item()?['Name'], concat('lastrun-', variables('OrgName'), '-', variables('RepoName'), '.json'))"
                                            }
                                        },
                                        "Set_variable_2": {
                                            "runAfter": {
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "RepoName",
                                                "value": "@items('For_each_2')['name']"
                                            }
                                        },
                                        "Until": {
                                            "actions": {
                                                "Condition_2": {
                                                    "actions": {
                                                        "For_each_3": {
                                                            "foreach": "@body('Parse_JSON_4')?['data']?['organization']?['repository']?['vulnerabilityAlerts']?['nodes']",
                                                            "actions": {
                                                                "Append_to_array_variable": {
                                                                    "runAfter": {
                                                                    },
                                                                    "type": "AppendToArrayVariable",
                                                                    "inputs": {
                                                                        "name": "vulnerabilityAlertsArray",
                                                                        "value": "@addProperty(addProperty(addProperty(items('For_each_3'), 'Repository', variables('RepoName')), 'LogType', 'vulnerabilityAlerts'), 'Organization', variables('OrgName'))"
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                            },
                                                            "type": "Foreach"
                                                        },
                                                        "Send_Data": {
                                                            "runAfter": {
                                                                "For_each_3": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": "@{variables('vulnerabilityAlertsArray')}",
                                                                "headers": {
                                                                    "Log-Type": "GitHubRepoLogs"
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "path": "/api/logs"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Parse_JSON_4": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@length(body('Parse_JSON_4')?['data']?['organization']?['repository']?['vulnerabilityAlerts']?['nodes'])",
                                                                        0
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Condition_3": {
                                                    "actions": {
                                                        "Update_blob": {
                                                            "runAfter": {
                                                            },
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": "{\n  \"lastRun\": \"@{utcNow()}\",\n  \"lastContext\": \"@{variables('lastContext')}\"\n}",
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "put",
                                                                "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/lastrun-',variables('OrgName'),'-',variables('RepoName'),'.json'))}"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Set_variable_7": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Set_variable_8": {
                                                                "runAfter": {
                                                                },
                                                                "type": "SetVariable",
                                                                "inputs": {
                                                                    "name": "vulnerabilityAlertsQuery",
                                                                    "value": "{\"query\": \"query {organization(login: \\\"@{variables('OrgName')}\\\") {repository(name: \\\"@{variables('RepoName')}\\\") { vulnerabilityAlerts(first: 100, after: \\\"@{variables('lastContext')}\\\") { nodes { createdAt dismissReason dismissedAt id vulnerableManifestFilename vulnerableManifestPath vulnerableRequirements securityAdvisory { databaseId description ghsaId id origin permalink publishedAt severity summary withdrawnAt } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } } } } }\"}"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@variables('hasNextPage')",
                                                                    ""
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "HTTP_2": {
                                                    "runAfter": {
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "body": "@variables('vulnerabilityAlertsQuery')",
                                                        "headers": {
                                                            "Authorization": "Bearer @{body('Get_secret')?['value']}",
                                                            "Content-Type": "application/json"
                                                        },
                                                        "method": "POST",
                                                        "uri": "https://api.github.com/graphql"
                                                    }
                                                },
                                                "Parse_JSON_4": {
                                                    "runAfter": {
                                                        "HTTP_2": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('HTTP_2')",
                                                        "schema": {
                                                            "properties": {
                                                                "data": {
                                                                    "properties": {
                                                                        "organization": {
                                                                            "properties": {
                                                                                "repository": {
                                                                                    "properties": {
                                                                                        "vulnerabilityAlerts": {
                                                                                            "properties": {
                                                                                                "nodes": {
                                                                                                    "items": {
                                                                                                        "properties": {
                                                                                                            "createdAt": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "dismissReason": {
                                                                                                            },
                                                                                                            "dismissedAt": {
                                                                                                            },
                                                                                                            "id": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "securityAdvisory": {
                                                                                                                "properties": {
                                                                                                                    "databaseId": {
                                                                                                                        "type": "integer"
                                                                                                                    },
                                                                                                                    "description": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "ghsaId": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "id": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "origin": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "permalink": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "publishedAt": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "severity": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "summary": {
                                                                                                                        "type": "string"
                                                                                                                    },
                                                                                                                    "withdrawnAt": {
                                                                                                                    }
                                                                                                                },
                                                                                                                "type": "object"
                                                                                                            },
                                                                                                            "vulnerableManifestFilename": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "vulnerableManifestPath": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "vulnerableRequirements": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": "object"
                                                                                                    },
                                                                                                    "type": "array"
                                                                                                },
                                                                                                "pageInfo": {
                                                                                                    "properties": {
                                                                                                        "endCursor": {
                                                                                                            "type": [
                                                                                                                "string",
                                                                                                                "null"
                                                                                                            ]
                                                                                                        },
                                                                                                        "hasNextPage": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "hasPreviousPage": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "startCursor": {
                                                                                                            "type": [
                                                                                                                "string",
                                                                                                                "null"
                                                                                                            ]
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            },
                                                                            "type": "object"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Set_variable_6": {
                                                    "runAfter": {
                                                        "Condition_2": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "hasNextPage",
                                                        "value": "@body('Parse_JSON_4')?['data']?['organization']?['repository']?['vulnerabilityAlerts']?['pageInfo']?['hasNextPage']"
                                                    }
                                                },
                                                "Set_variable_7": {
                                                    "runAfter": {
                                                        "Set_variable_6": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "lastContext",
                                                        "value": "@body('Parse_JSON_4')?['data']?['organization']?['repository']?['vulnerabilityAlerts']?['pageInfo']?['endCursor']"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Condition": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": "@equals(variables('hasNextPage'), false)",
                                            "limit": {
                                                "count": 60,
                                                "timeout": "PT1H"
                                            },
                                            "type": "Until"
                                        }
                                    },
                                    "runAfter": {
                                        "Parse_JSON_2": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "HTTP": {
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "Authorization": "Bearer @{body('Get_secret')?['value']}",
                                            "Content-Type": "application/json"
                                        },
                                        "method": "GET",
                                        "uri": "https://api.github.com/orgs/@{variables('OrgName')}/repos"
                                    }
                                },
                                "Parse_JSON_2": {
                                    "runAfter": {
                                        "HTTP": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('HTTP')",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    }
                                },
                                "Set_variable": {
                                    "runAfter": {
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "OrgName",
                                        "value": "@items('For_each')['org']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Get_blob_content": {
                            "runAfter": {
                                "Get_secret": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent('/githublogicapp/ORGS.json'))}/content",
                                "queries": {
                                    "inferContentType": true
                                }
                            }
                        },
                        "Get_secret": {
                            "runAfter": {
                                "List_blobs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "[concat('/secrets/@{encodeURIComponent(''', variables('SecretName'), ''')}/value')]"
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "outputs"
                                    ]
                                }
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "OrgName",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_2": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "RepoName",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_3": {
                            "runAfter": {
                                "Initialize_variable_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "vulnerabilityAlertsQuery",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_4": {
                            "runAfter": {
                                "Initialize_variable_3": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "lastContext",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_5": {
                            "runAfter": {
                                "Initialize_variable_4": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "hasNextPage",
                                        "type": "boolean",
                                        "value": true
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_6": {
                            "runAfter": {
                                "Initialize_variable_5": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "vulnerabilityAlertsArray",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "List_blobs": {
                            "runAfter": {
                                "Initialize_variable_6": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/default/foldersV2/@{encodeURIComponent(encodeURIComponent('/githublogicapp'))}",
                                "queries": {
                                    "nextPageMarker": "",
                                    "useFlatListing": false
                                }
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "Get_blob_content": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@json(body('Get_blob_content'))",
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "org": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "org"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "outputs": {
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureBlobConnectionName'))]",
                                "connectionName": "[variables('AzureBlobConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureblob')]"
                            },
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorConnectionName'))]",
                                "connectionName": "[variables('AzureLogAnalyticsDataCollectorConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('KeyVaultConnectionName'))]",
                                "connectionName": "[variables('KeyVaultConnectionName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
