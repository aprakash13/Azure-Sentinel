{
    "id": "AlsidForAD",
    "title": "Alsid For Active Directory",
    "publisher": "Alsid",
    "descriptionMarkdown": "Syslog is an event logging protocol that is common to Linux. Applications will send messages that may be stored on the local machine or delivered to a Syslog collector. When the Agent for Linux is installed, it configures the local Syslog daemon to forward messages to the agent. The agent then sends the message to the workspace.\n\n[Learn more >](https://aka.ms/sysLogInfo)",
    "additionalRequirementBanner": "This data connector depends on a parser based on Kusto Function to work as expected. Follow the steps to use this Kusto Function alias **afad_parser** in queries and workbooks. [Follow steps to get this Kusto Function>](https://github.com/Azure/Azure-Sentinel/blob/master/Parsers/Alsid/afad_parser.kql)  ",
    "graphQueries": [
        {
            "metricName": "Total data received",
            "legend": "AlsidForADLog",
            "baseQuery": "AlsidForADLog_CL"
        }
    ],
    "sampleQueries": [
        {
            "description" : "parser",
            "query" : "\/\/ Usage Instruction : \r\n\/\/ Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias (e.g. afad_parser).\r\n\/\/ Reference : Using functions in Azure monitor log queries : https:\/\/docs.microsoft.com\/azure\/azure-monitor\/log-query\/functions\r\n\r\nlet Common = AlsidForADLog_CL\r\n| parse RawData with\r\n                     Time:datetime  \" \"\r\n                     Host:string  \" \"\r\n                     Product:string \"[\"\r\n                     PID:int \"]: \\\"\"\r\n                     MessageType:int \"\\\" \\\"\"\r\n                     AlertID:int \"\\\" \\\"\"\r\n                     Forest:string \"\\\" \\\"\"\r\n                     Domain:string \"\\\" \"\r\n                     DistinctPart:string;\r\nlet Deviances = Common\r\n| where MessageType == 0 | parse DistinctPart with \"\\\"\"\r\n                     Codename:string \"\\\" \\\"\"\r\n                     Severity:string \"\\\" \\\"\"\r\n                     ADObject:string \"\\\" \\\"\"\r\n                     DevianceID:string \"\\\" \\\"\"\r\n                     ProfileID:string \"\\\" \\\"\"\r\n                     ReasonCodename:string \"\\\" \\\"\"\r\n                     EventID:string \"\\\" \"\r\n                     Attributes:string \"\\r\\n\";\r\nlet Changes = Common\r\n| where MessageType == 1\r\n| parse kind=regex DistinctPart with \"\\\"\"\r\n                     ADObject:string \"\\\" \\\"\"\r\n                     EventID:string \"\\\" \\\"\"\r\n                     EventType:string \"\\\" \"\r\n                     Attributes:string \"\\r?\\n\";\r\nunion Changes, Deviances\r\n| project-away DistinctPart, Product, _ResourceId, _SubscriptionId;"
        },
        {
            "description" : "Get the number of alerts triggered by each checker",
            "query": "afad_parser\n | where MessageType == 0\n | summarize AlertCount = count() by Codename"
        },
        {
            "description" : "Get all IoE alerts with severity superior to the threshold",
            "query" : "let threshold = 2;\n let SeverityTable=datatable(Severity:string,Level:int) [\n \"low\", 1,\n \"medium\", 2,\n \"high\", 3,\n \"critical\", 4\n ];\n afad_parser\n | where MessageType == 0\n | lookup kind=leftouter SeverityTable on Severity\n | where Level >= ['threshold']"
        },
        {
            "description" : "Get all IoE alerts in the last 24 hours",
            "query" : "afad_parser\r\n| where MessageType == 0 and TimeGenerated > ago(1d)"
        },
        {
            "description" : "Get all IoE alerts in the last 7 days",
            "query" : "afad_parser\r\n| where MessageType == 0 and TimeGenerated > ago(7d)"
        },
        {
            "description" : "Get all IoE alerts in the last 30 days",
            "query" : "afad_parser\r\n| where MessageType == 0 and TimeGenerated > ago(30d)"
        },
        {
            "description" : "Get all trailflow changes in the last 24 hours",
            "query" : "afad_parser\r\n| where MessageType == 1 and TimeGenerated > ago(1d)"
        },
        {
            "description" : "Get all trailflow changes in the last 7 days",
            "query" : "afad_parser\r\n| where MessageType == 1 and TimeGenerated > ago(7d)"
        }
    ],
    "dataTypes": [
        {
            "name": "AlsidForADLog_CL",
            "lastDataReceivedQuery": "AlsidForADLog_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
        }
    ],
    "connectivityCriterias": [
        {
            "type": "IsConnectedQuery",
            "value": [
                "AlsidForADLog_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
            ]
        }
    ],
    "availability": {
        "status": 1
    },
    "permissions": {
        "resourceProvider": [
            {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "write permission is required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                    "write": true,
                    "delete": true
                }
            }
        ]
    },
    "instructionSteps": [
        {
            "title": "", 
            "description": ">This data connector depends on a parser based on a Kusto Function to work as expected. [Follow these steps](https://github.com/Azure/Azure-Sentinel/blob/master/Parsers/Alsid/afad_parser.kql) to create the Kusto Functions alias, **afad_parser**",
            "instructions": [ 
            ]    
        }, 
        {
            "title": "1. Configure the Syslog server",
            "description": "You will first need a **linux Syslog** server that Alsid for AD will send logs to. Typically you can run **rsyslog** on **Ubuntu**.\n You can then configure this server as you whish but it is recommended to be able to output AFAD logs in a separate file."
        },
        {
            "title": "2. Configure Aldid to send logs to your Syslog server",
            "description": "Once this is done, check that the logs are correctly gathered on your server in a seperate file (to do this, you can use the *Test the configuration* button in the Syslog alert configuration in AFAD)."
        },
        {
            "title": "3. Install and onboard the Microsoft agent for Linux",
            "description": "",
            "instructions": [
                {
                    "parameters": {
                        "title": "Choose where to install the agent:",
                        "instructionSteps": [
                            {
                                "title": "Install agent on Azure Linux Virtual Machine",
                                "description": "Select the machine to install the agent on and then click **Connect**.",
                                "instructions": [
                                    {
                                        "parameters": {
                                            "linkType": "InstallAgentOnLinuxVirtualMachine"
                                        },
                                        "type": "InstallAgent"
                                    }
                                ]
                            },
                            {
                                "title": "Install agent on a non-Azure Linux Machine",
                                "description": "Download the agent on the relevant machine and follow the instructions.",
                                "instructions": [
                                    {
                                        "parameters": {
                                            "linkType": "InstallAgentOnLinuxNonAzure"
                                        },
                                        "type": "InstallAgent"
                                    }
                                ]
                            }
                        ]
                    },
                    "type": "InstructionStepsGroup"
                }
            ]
        },
        {
            "title": "4. Configure the logs to be collected by the agents",
            "description": "Configure the agent to collect the logs.\n\n1.  Under workspace advanced settings **Configuration**, select **Data** and then **Custom Logs**.\n2.  Select **Apply below configuration to my machines** and click **Add**.\n4. Upload a sample AFAD Syslog file from your server and click **Next**.\n5. Set the record delimiter to **New Line** if not already the case and click **Next**.\n6. Select **Linux** and enter the path of the file where the AFAD Syslogs are stored, click **+** then **Next**.\n7. Set the **Name** to *AlsidForADLog_CL* then click **Done** (Azure automatically adds *_CL* at the end of the name, there must be only one, make sure the name is not *AlsidForADLog_CL_CL*)",
            "instructions": [
                {
                    "parameters": {
                        "linkType": "OpenAdvancedWorkspaceSettings"
                    },
                    "type": "InstallAgent"
                }
            ]
        }
    ]
}
