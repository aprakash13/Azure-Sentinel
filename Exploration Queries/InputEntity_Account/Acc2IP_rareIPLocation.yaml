Id: 2db8cac9-d2ce-4494-93bf-4678cd872ce4
DisplayName: IPs from rare locations used by account
Description: IPs from rare locations (less than 10 percent of users activity) during the range of +1w and -1w
InputEntityType: Account
InputFields:
  - Name
  - UPNSuffix
  - AadUserId
OutputEntityTypes:
  - Ip
QueryPeriodBefore: 7d
QueryPeriodAfter: 7d
DataSources:
  - SigninLogs
Tactics:
  - CredentialAccess
  - Collection
query: |

  let IPsFromRareLocations = (v_Account_Name:string, v_Account_UPNSuffix:string, v_Account_AadUserId:string){
  let LocationPrevalence =
  SigninLogs
  | extend p_Account_Name = case(
  // Handles mixed use scenario of NTDomain\AccountName@UPNSuffix
  v_Account_Name has '@' and v_Account_Name has '\\', tostring(split(tostring(split(v_Account_Name, '\\')[1]),'@')[0]),
  v_Account_Name has '@', tostring(split(v_Account_Name, '@')[0]),
  v_Account_Name has '\\', tostring(split(v_Account_Name, '\\')[1]),
  v_Account_Name
  )
  | extend p_Account_UPNSuffix = case(
  v_Account_UPNSuffix has '@', tostring(split(v_Account_UPNSuffix, '@')[1]),
  v_Account_UPNSuffix has '\\', tostring(split(v_Account_UPNSuffix, '\\')[0]),
  v_Account_UPNSuffix
  )
  | parse UserPrincipalName with Account_Name '@' Account_UPNSuffix
  | project-rename Account_AadUserId = toguid(UserId)
  | where (isnotempty(Account_Name) and Account_Name =~ p_Account_Name and isnotempty(Account_UPNSuffix) and Account_UPNSuffix =~ p_Account_UPNSuffix)
  or (isnotempty(Account_AadUserId) and Account_AadUserId == toguid(v_Account_AadUserId))
  | extend FullLocation = strcat(Location,'|', LocationDetails.state, '|', LocationDetails.city)
  | summarize ConnectionCount = count() by FullLocation, UserPrincipalName, IPAddress, Account_Name, Account_UPNSuffix, Account_AadUserId;
  LocationPrevalence
  | summarize make_list(IPAddress), make_list(FullLocation), make_list(ConnectionCount), dcount(FullLocation), totalActivity = sum(ConnectionCount) by UserPrincipalName, Account_Name, Account_UPNSuffix, Account_AadUserId
  | mvexpand Location = list_FullLocation, ConnectionCount = list_ConnectionCount, IPAddress = list_IPAddress
  | extend Location = tostring(Location), ConnectionCount = toint(ConnectionCount), IPAddress = tostring(IPAddress)
  | extend percentOfActivity = 100*round(todouble(ConnectionCount)/totalActivity,4)
  | where percentOfActivity < 10
  | project UserPrincipalName, Account_Name, Account_UPNSuffix, Account_AadUserId, IPAddress, Location, ConnectionCount, percentOfActivity
  | sort by percentOfActivity asc, ConnectionCount desc
  | top 10 by percentOfActivity asc
  | extend IP_Location_Country = tostring(split(Location,'|')[0]), IP_Location_Region = tostring(split(Location,'|')[1]), IP_Location_City = tostring(split(Location,'|')[2])
  | extend Account_Aux_info = pack('PercentOfActivity', percentOfActivity, 'ConnectionCount', ConnectionCount)
  | parse UserPrincipalName with Account_NTDomain '\\' *
  | project Account_UnstructuredName = UserPrincipalName, Account_Name, Account_NTDomain, Account_UPNSuffix, Account_AadUserId, IP_Address = IPAddress, IP_Location_Country, IP_Location_Region, IP_Location_City, Account_Aux_info
  };
  // Where <Name> is the UserName such as John from John@contoso.com, <UPNSuffix> is the domain such as contoso.com from John@contoso.com and <AadUserId> is the GUID assigned in AAD to the user
  IPsFromRareLocations('<Name>', '<UPNSuffix>', '<AadUserId>')
