// Title:           Duo Security Trust Monitor Parser
// Author:          Microsoft
// Version:         1.0
// Last Updated:    02/11/2021
// Comment:         Initial Release
//  
// DESCRIPTION:
// This parser takes Duo Security Trust Monitor records ingested from the Function App Data Connector and parses the data into a normalized schema
//
// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
//    It is recommended to name the Function Alias, as DuoSecurityTrustMonitor
// 3. Kusto Functions usually take 10-15 minutes to activate. You can then use Function Alias for other queries
//
// REFERENCES: 
// Using functions in Azure monitor log queries: https://docs.microsoft.com/azure/azure-monitor/log-query/functions
//
// 
DuoSecurityTrustMonitor_CL 
| project SourceSystem, TimeGenerated, Type, TenantId, MG, ManagementGroupName, Computer, RawData, _ResourceId,
    FromCommonNetblock = column_ifexists("from_common_netblock_b", ""),
    FromNewUser = column_ifexists("from_new_user_b", ""),
    LowRiskIp = column_ifexists("low_risk_ip_b", ""),
    PrioirtyEvent = column_ifexists("priority_event_b", ""),
    SeKey = column_ifexists("sekey_s", ""),
    State = column_ifexists("state_s", ""),
    SurfacedAuthAccessDeviceBrowser = column_ifexists("surfaced_auth_access_device_browser_s", ""),
    SurfacedAuthAccessDeviceBrowserVersion = column_ifexists("surfaced_auth_access_device_browser_version_s", ""),
    SurfacedAuthAccessDeviceIP = column_ifexists("surfaced_auth_access_device_ip_s", ""),
    SurfacedAuthAccessDeviceIsEncryptionEnabled = column_ifexists("surfaced_auth_access_device_is_encryption_enabled_s", ""),
    SurfacedAuthAccessDeviceIsFirewallEnabled = column_ifexists("surfaced_auth_access_device_is_firewall_enabled_s", ""),
    SurfacedAuthAccessDeviceIsPasswordSet = column_ifexists("surfaced_auth_access_device_is_password_set_s", ""),
    SurfacedAuthAccessDeviceLocationCity = column_ifexists("surfaced_auth_access_device_location_city_s", ""),
    SurfacedAuthAccessDeviceLocationCountry = column_ifexists("surfaced_auth_access_device_location_country_s", ""),
    SurfacedAuthAccessDeviceLocationState = column_ifexists("surfaced_auth_access_device_location_state_s", ""),
    SurfacedAuthAccessDeviceOS = column_ifexists("surfaced_auth_access_device_os_s", ""),
    SurfacedAuthAccessDeviceOSVersion = column_ifexists("surfaced_auth_access_device_os_version_s", ""),
    SurfacedAuthAccessDeviceSecurityAgents = column_ifexists("surfaced_auth_access_device_security_agents_s", ""),
    SurfacedAuthAlias = column_ifexists("surfaced_auth_alias_s", ""),
    SurfacedAuthApplicationKey = column_ifexists("surfaced_auth_application_key_s", ""),
    SurfacedAuthApplicationName = column_ifexists("surfaced_auth_application_name_s", ""),
    SurfacedAuthFactor = column_ifexists("surfaced_auth_factor_s", ""),
    SurfacedAuthISOTimeStamp = column_ifexists("surfaced_auth_isotimestamp_t", ""),
    SurfacedAuthReason = column_ifexists("surfaced_auth_reason_s", ""),
    SurfacedAuthResult = column_ifexists("surfaced_auth_result_s", ""),
    SurfacedAuthTimeStamp = column_ifexists("surfaced_auth_timestamp_d", ""),
    SurfacedAuthTxId = column_ifexists("surfaced_auth_txid_s", ""),
    SurfacedAuthUserGroups = column_ifexists("surfaced_auth_user_groups_s", ""),
    SurfacedAuthUserKey = column_ifexists("surfaced_auth_user_key_s", ""),
    SurfacedAuthUserName = column_ifexists("surfaced_auth_user_name_s", ""),
    SurfacedTimeStamp = column_ifexists("surfaced_timestamp_d", ""),
    TriageEventUri = column_ifexists("triage_event_uri_s", ""),
    TriagedAsInteresting = column_ifexists("triaged_as_interesting_b", ""),
    EventType = column_ifexists("type_s", "")
    Explanation = column_ifexists("explanations_s", ""),
    PriorityReasons = column_ifexists("priority_reasons_s", "")












