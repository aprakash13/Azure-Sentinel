// Usage Instructions: 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name as CiscoSEGEvent and specifying Legacy Category.
// This parser covers the following types of Cisco SEG logs: Textmail, Delivery, Bounce, HTTP, AMP, Authentication, Consolidated logs.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. CiscoSEGEvent | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let EventData = CiscoSEG_CL 
| extend EventVendor = 'Cisco'
| extend EventProduct = 'SEG';
let cisco_seg_txt_injection =() {
EventData
| extend EventTime = todatetime(extract(@'\A\w{3}\s(\w{3}\s\d{1,2}\s\d{2}:\d{2}:\d{2}\s\d{4})', 1, Message))
| extend InjectionConnectionId = extract(@'ICID\s=?(\d+)\s', 1, Message)
| extend DeliveryConnectionId = extract(@'DCID\s=?(\d+)\s', 1, Message)
| extend RpcConnectionId = extract(@'RCID\s=?(\d+)\s', 1, Message)
| extend Mid = extract(@'MID\s=?(\d+)', 1, Message)
| extend ExternalMessageId = extract(@"Message-ID\s\'<(.*?)>\'", 1, Message)
| extend MessageSize = toint(extract(@'(\d+)\sbytes', 1, Message))
| extend RecipientId = extract(@'RID\s=?(\d+)', 1, Message)
| extend SrcUserUpn = extract(@'From:\s<(\S+)>', 1, Message)
| extend DstUserUpn = extract(@'To:\s<(\S+)>', 1, Message)
| extend SrcIpAddr = extract(@'interface\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend DstIpAddr = extract(@'interface\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s address(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
};
let cisco_seg_txt_hbounced =() {
EventData
| where Message has 'Bounced' and Message has 'DCID'
| extend EventMessage = extract(@'(\d\.\d\.\d\s\-\s.*?)\(', 1, Message)
| extend ErrorCode = extract(@"\(\'(\d+)\'", 1, Message)
| extend EventResultDetails = extract(@"\.{3}\s(.*?)\'\]", 1, Message)
| extend DstUserUpn = extract(@'<(\S+)>', 1, Message)
};
let cisco_seg_txt_sbounced =() {
EventData
| where Message has 'Delayed' and Message has 'DCID'
| extend EventMessage = extract(@'(\d\.\d\.\d\s\-\s.*?)\(', 1, Message)
| extend ErrorCode = extract(@"\(\'(\d+)\'", 1, Message)
| extend EventResultDetails = extract(@"\[\'(.*?)\'\]", 1, Message)
};
let cisco_seg_attachment =() {
EventData
| where Message has_all ('MID', 'attachment')
| extend FileName = extract(@"(?i)attachment\s\'(.*?)\'", 1, Message)
};
let cisco_seg_subject =() {
EventData
| where Message has_all ('MID', 'Subject')
| extend Subject = extract(@"Subject \'(.*?)\'", 1, Message)
};
let cisco_seg_delivery_hbounce =() {
EventData
| where Message has 'bounce'
| extend EventType = 'Delivery logs'
| extend DeliveryTime = todatetime(extract(@'del_time=\"(.*?)\"', 1, Message))
| extend InjestionTime = todatetime(extract(@'inj_time=\"(.*?)\"', 1, Message))
| extend MessageSize = toint(extract(@'bytes=\"(\d+)\"', 1, Message))
| extend Mid = extract(@'mid=\"(\d+)\"', 1, Message)
| extend DstIpAddr = extract(@'ip=\"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend DstUserUpn = extract(@'to=\"(.*?)\"', 1, Message)
| extend SrcUserUpn = extract(@'from=\"(.*?)\"', 1, Message)
| extend SrcIpAddr = extract(@'source_ip=\"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend EventCode = extract(@'code=\"(\d+)\"', 1, Message)
| extend EventResultDetails = extract(@'reason=\"(.*?)\"', 1, Message)
| extend EventMessage = extract(@'error=\"\[\"(.*?)\"\]\"', 1, Message)
};
let cisco_seg_delivery_sbounce =() {
EventData
| where Message has 'success'
| extend EventType = 'Delivery logs'
| extend DeliveryTime = todatetime(extract(@'del_time=\"(.*?)\"', 1, Message))
| extend InjestionTime = todatetime(extract(@'inj_time=\"(.*?)\"', 1, Message))
| extend MessageSize = toint(extract(@'bytes=\"(\d+)\"', 1, Message))
| extend Mid = extract(@'mid=\"(\d+)\"', 1, Message)
| extend DstIpAddr = extract(@'ip=\"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend DstUserUpn = extract(@'to=\"(.*?)\"', 1, Message)
| extend SrcUserUpn = extract(@'from=\"(.*?)\"', 1, Message)
| extend SrcIpAddr = extract(@'source_ip=\"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend EventCode = extract(@'code=\"(\d+)\"', 1, Message)
| extend Reply = extract(@'reply=\"(.*?)\"', 1, Message)
};
let cisco_seg_bounce_hbounce =() {
EventData
| where Message matches regex @'Bounced:\s\d+'
| extend EventType = 'Bounce logs'
| extend SrcUserUpn = extract(@'From:<(.*?)>', 1, Message)
| extend DstUserUpn = extract(@'To:<(.*?)>', 1, Message)
| extend EventMessage = extract(@"Reason:\s?\'(.*?)\'", 1, Message)
| extend EventResultDetails = extract(@"Response:\s\'\(\'\d+\',\s\[\'(.*?)\'", 1, Message)
| extend ErrorCode = extract(@"Response:\s\'\(\'(\d+)\'", 1, Message)
| extend ExternalMessageId = extract(@"Message-Id:\s?<(.*?)>", 1, Message)
| extend Subject = extract(@"subject:\s(.*)\'", 1, Message)
};
let cisco_seg_bounce_sbounce =() {
EventData
| where Message matches regex @'Delayed:\s\d+'
| extend EventType = 'Bounce logs'
| extend SrcUserUpn = extract(@'From:<(.*?)>', 1, Message)
| extend DstUserUpn = extract(@'To:<(.*?)>', 1, Message)
| extend EventMessage = extract(@"Reason:\s?\'(.*?)\'", 1, Message)
| extend EventResultDetails = extract(@"Response:\s\'\(\'\d+\',\s\[\'(.*?)\'", 1, Message)
| extend SrcIpAddr = extract(@'your IP address \((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\)', 1, Message)
};
let cisco_seg_http =() {
EventData
| where Message has_all ('req:', 'user:')
| extend EventType = 'HTTP logs'
| extend SrcIpAddr = extract(@'req:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend SrcUserName = extract(@'user:(\S+)', 1, Message)
| extend SessionId = extract(@'id:(\S+)', 1, Message)
| extend HttpRequestMethod = extract(@'(GET|POST|PUT)', 1, Message)
| extend UrlOriginal = extract(@'(GET|POST|PUT)\s(.*)\s', 1, Message)
| extend HttpVersion = extract(@'HTTP\/(\S+)', 1, Message)
| extend HttpStatusCode = extract(@'HTTP\/\S+\s(\d+)', 1, Message)
};
let cisco_seg_amp_response =() {
EventData
| where Message has_all ('Disposition', 'Malware')
| extend EventMessage = 'Response received for file reputation query from Cloud'
| extend FileName = extract(@"File Name\s\=\s\'(.*?)\'", 1, Message)
| extend Mid = extract(@'MID\s\=\s(\d+)', 1, Message)
| extend Disposition = extract(@'Disposition\s\=\s(MALICIOUS|CLEAN|FILE UNKNOWN|VERDICT UNKNOWN|LOW RISK),', 1, Message)
| extend Malware = extract(@'Malware\s\=\s(.*?),', 1, Message)
| extend ReputationScore = extract(@'Reputation Score\s\=\s(\d+)', 1, Message)
| extend FileHashSha256 = extract(@'sha256\s\=\s(.*?),', 1, Message)
| extend UploadAction = extract(@'upload_action\s\=\s(\d+)', 1, Message)
};
let cisco_seg_amp_analysis_complete =() {
EventData
| where Message has_all ('Disposition', 'run_id')
| extend EventType = 'AMP logs'
| extend EventMessage = 'File Analysis Complete.'
| extend FileHashSha256 = extract(@'SHA256:\s(.*?),', 1, Message)
| extend SubmitTime = unixtime_seconds_todatetime(toint(extract(@'Submit Timestamp:\s(\d+)', 1, Message)))
| extend UpdateTime = unixtime_seconds_todatetime(toint(extract(@'Update Timestamp:\s(\d+)', 1, Message)))
| extend Disposition = extract(@'Disposition:\s([1-3])', 1, Message)
| extend Score = extract(@'Score:\s(\d+)', 1, Message)
| extend RunId = extract(@'run_id:\s(\d+)', 1, Message)
| extend EventResultDetails = extract(@'Details:\s(.*?)\sSpyname', 1, Message)
| extend ThreatName = extract(@'Spyname:\[(.*?)\]', 1, Message)
};
let cisco_seg_amp_retrospective_verdict =() {
EventData
| where Message has 'Retrospective verdict received'
| extend EventType = 'AMP logs'
| extend EventMessage = 'Retrospective verdict received.'
| extend FileHashSha256 = extract(@'SHA256:\s(.*?),', 1, Message)
| extend EventTime = unixtime_seconds_todatetime(toint(extract(@'Timestamp:\s(.*?),', 1, Message)))
| extend Verdict = extract(@'Verdict:\s(MALICIOUS|CLEAN)', 1, Message)
| extend ReputationScore = extract(@'Reputation Score:\s(\d+)', 1, Message)
| extend ThreatName = extract(@'Spyname:\s(.*?)\.', 1, Message)
};
let cisco_seg_aaa_success =() {
EventData
| where Message has 'authenticated'
| extend EventType = 'Authentication logs'
| extend EventMessage = 'Authentication Success'
| extend SrcUserName = extract(@'(?i)User\s(\S+)', 1, Message)
};
let cisco_seg_aaa_success_2 =() {
EventData
| where Message has_all ('user', 'logged')
| extend EventType = 'Authentication logs'
| extend EventMessage = 'Authentication Success'
| extend SrcUserName = extract(@'(?i)User\s(\S+)', 1, Message)
| extend SrcIpAddr = extract(@'from\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend Privilege = extract(@'privilege\s(\S+)', 1, Message)
| extend NetworkApplicationProtocol = extract(@'using an\s(\S+)\sconnection', 1, Message)
};
let cisco_seg_aaa_failed =() {
EventData
| where Message has 'authentication'
| extend EventType = 'Authentication logs'
| extend EventMessage = 'Authentication Failed'
| extend SrcUserName = extract(@'(?i)User\s(\S+)', 1, Message)
| extend SrcIpAddr = extract(@'from\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
};
let cisco_consolidated_cef = 
EventData
| where Message has_all ('CEF', 'Cisco')
| extend EventProduct = extract(@'Cisco\|(.*?)\|', 1, Message)
| extend EventProductVersion = extract(@'Cisco\|(.*?)\|([0-9\.\-]+)\|', 2, Message)
| extend EventType = 'Consolidated Log Event'
| extend EventSeverity = extract(@'Consolidated Log Event\|(\d+)\|', 1, Message)
| extend SerialNumber = extract(@'deviceExternalId=(\S+)', 1, Message)
| extend Mid = extract(@'ESAMID=(\d+)', 1, Message)
| extend IcId = extract(@'ESAICID=(\d+)', 1, Message)
| extend AmpVerdict = extract(@'ESAAMPVerdict=(NOT EVALUATED|CLEAN|FA_PENDING|UNKNOWN|SKIPPED|UNSCANNABLE|LOW_RISK|MALICIOUS)', 1, Message)
| extend AsVerdict = extract(@'ESAASVerdict=(NOT EVALUATED|NEGATIVE|SUSPECT|BULK_MAIL|SOCIAL_MAIL|MARKETING_MAIL|POSITIVE)', 1, Message)
| extend AvVerdict = extract(@'ESAAVVerdict=(NOT EVALUATED|NEGATIVE|REPAIRED|ENCRYPTED|UNSCANNABLE|POSITIVE)', 1, Message)
| extend CfVerdict = extract(@'ESACFVerdict=(NOT EVALUATED|MATCH|NO MATCH)', 1, Message)
| extend DcIdTimestamp = todatetime(extract(@'endTime=(\w{3}\s\w{3}\s\d{1,2}\s\d{2}:\d{2}:\d{2}\s\d{4})', 1, Message))
| extend DlpVerdict = extract(@'ESADLPVerdict=(NOT EVALUATED|NO TRIGGER|VIOLATION|NO VIOLATION)', 1, Message)
| extend DvcIpAddr = extract(@'dvc=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend FileDetails = parse_json(tostring(extract(@'ESAAttachmentDetails=(\{.*\})', 1, Message)))
| extend FileName = extract(@"ESAAttachmentDetails=\{\'(.*?)\':", 1, Message)
| extend FileHashSha256 = extract(@"fileHash\':\s?\'([0-9a-fA-F]{64})\'", 1, Message)
| extend FileSize = extract(@"fsize\':\s?(\d+)", 1, Message)
| extend FriendlyFrom = extract(@'ESAFriendlyFrom=(\S+)\s', 1, Message)
| extend GMVerdict = extract(@'ESAGMVerdict=(NOT EVALUATED|POSITIVE|NEGATIVE)', 1, Message)
| extend IcIdStartTime = todatetime(extract(@'startTime=(\w{3}\s\w{3}\s\d{1,2}\s\d{2}:\d{2}:\d{2}\s\d{4})', 1, Message))
| extend DvcInboundInterface = extract(@'deviceInboundInterface=(Incomingmail|Inbound)', 1, Message)
| extend DvcOutboundInterface = extract(@'deviceOutboundInterface=(Outgoingmail|Outbound)', 1, Message)
| extend DvcDirection = extract(@'deviceDirection=(0|1)', 1, Message)
| extend MailFlowPolicy = extract(@'ESAMailFlowPolicy=(\S+)', 1, Message)
| extend SrcUserUpn = extract(@'suser=(\S+)', 1, Message)
| extend MailPolicy = extract(@'cs1=(\S+)', 1, Message)
| extend DvcAction = extract(@'act=(DROPPED|BOUNCED|DELIVERED|QUARANTINED|DQ)', 1, Message)
| extend FinalActionDetails = extract(@'ESAFinalActionDetails=(.*?)\scs4Label', 1, Message)
| extend ExternalMessageId = extract(@"cs4=\'<(.*?)>\'", 1, Message)
| extend MessageSize = toint(extract(@'ESAMsgSize=(\d+)', 1, Message))
| extend OFVerdict = extract(@'ESAOFVerdict=(NOT EVALUATED|POSITIVE|NEGATIVE)', 1, Message)
| extend Recepients = extract(@'duser=(\S+)', 1, Message)
| extend SbrsScore = extract(@'cfp1=(\S+)', 1, Message)
| extend SdrDomainAge = extract(@'ESASDRDomainAge=(\d+.*days)', 1, Message)
| extend SdrThreatCategory = extract(@'cs3=(\S+)', 1, Message)
| extend SdrRepScore = extract(@'cs6=(\S+)', 1, Message)
| extend SpfVerdict = parse_json(extract(@'ESASPFVerdict=(\{.*\})', 1, Message))
| extend SrcDvcHostname = extract(@'sourceHostName=(\S+)', 1, Message)
| extend SenderGroup = extract(@'ESASenderGroup=(\S+)', 1, Message)
| extend SrcIpAddr = extract(@'sourceAddress=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
| extend MessageText = extract(@'msg=(.*?)', 1, Message)
;
let cisco_consolidated_cef_sip =() {
cisco_consolidated_cef
| where DvcDirection == '0'
| extend SrcIpAddr = extract(@'ESAHeloIP=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
};
let cisco_consolidated_cef_dip =() {
cisco_consolidated_cef
| where DvcDirection == '1'
| extend DstIpAddr = extract(@'ESAHeloIP=(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', 1, Message)
};
union isfuzzy=true cisco_seg_txt_injection, cisco_seg_txt_hbounced, cisco_seg_txt_sbounced, cisco_seg_attachment, cisco_seg_subject, cisco_seg_delivery_hbounce, cisco_seg_delivery_sbounce, cisco_seg_http, cisco_seg_amp_response, cisco_seg_amp_analysis_complete, cisco_seg_amp_retrospective_verdict, cisco_seg_aaa_success, cisco_seg_aaa_success_2, cisco_seg_aaa_failed, cisco_consolidated_cef_sip, cisco_consolidated_cef_dip
| project TimeGenerated
        , EventVendor
        , EventProduct
        , EventTime
        , InjectionConnectionId
        , DeliveryConnectionId
        , RpcConnectionId
        , Mid
        , ExternalMessageId
        , MessageSize
        , RecipientId
        , SrcUserUpn
        , DstUserUpn
        , SrcIpAddr
        , DstIpAddr
        , EventMessage
        , ErrorCode
        , EventResultDetails
        , FileName
        , Subject
        , DeliveryTime
        , InjestionTime
        , EventCode
        , Reply
        , SrcUserName
        , SessionId
        , HttpRequestMethod
        , UrlOriginal
        , HttpVersion
        , HttpStatusCode
        , Disposition
        , Malware
        , ReputationScore
        , FileHashSha256
        , UploadAction
        , SubmitTime
        , UpdateTime
        , Score
        , RunId
        , ThreatName
        , Verdict
        , Privilege
        , NetworkApplicationProtocol
        , EventProductVersion
        , EventType
        , EventSeverity
        , SerialNumber
        , IcId
        , AmpVerdict
        , AsVerdict
        , AvVerdict
        , CfVerdict
        , DcIdTimestamp
        , DlpVerdict
        , DvcIpAddr
        , FileDetails
        , FileSize
        , FriendlyFrom
        , GMVerdict
        , IcIdStartTime
        , DvcInboundInterface
        , DvcOutboundInterface
        , DvcDirection
        , MailFlowPolicy
        , MailPolicy
        , DvcAction
        , FinalActionDetails
        , OFVerdict
        , Recepients
        , SbrsScore
        , SdrDomainAge
        , SdrThreatCategory
        , SdrRepScore
        , SpfVerdict
        , SrcDvcHostname
        , SenderGroup
        , MessageText
