// Usage Instruction : 
// Paste below query in log analytics, click on Save button and select as Function from drop down by specifying function name and alias as Corelight.
// Function usually takes 10-15 minutes to activate. You can then use function alias from any other queries (e.g. Corelight | take 10).
// Reference : Using functions in Azure monitor log queries : https://docs.microsoft.com/azure/azure-monitor/log-query/functions
let Corelight_view = view () {
    Corelight_CL | where isnotempty(Message)
| extend tmp = parse_json(Message)
| evaluate bag_unpack(tmp)| extend path_parts = parse_path(log_file_s)
    | extend EventType = extract("(^.*?)_\\d+", 1, tostring(path_parts["Filename"])),
        EventVendor="Corelight",
        EventProduct="Corelight Sensor",
        SrcDvcHostname=column_ifexists('hostname_s', ''),
        EventEndTime=column_ifexists('ts', ''),
        SrcDvcFile=column_ifexists('log_file_s', '')
    | project-away path_parts, log_file_s
};
let Corelight_main_view = view () {
    Corelight_view 
    | extend
        Action=column_ifexists('action', ''),
        Actions=column_ifexists('actions', ''),
        AgentRemoteId=column_ifexists('agent_remote_id', ''),
        Analyzer=column_ifexists('analyzer', ''),
        AuthAttempts=column_ifexists('auth_attempts', ''),
        AuthSuccess=column_ifexists('auth_success', ''),
        BasicConstraintsCa=column_ifexists('basic_constraints.ca', ''),
        BasicConstraintsPathLen=column_ifexists('basic_constraints.path_len', ''),
        Cc=column_ifexists('cc', ''),
        CertificateCn=column_ifexists('certificate.cn', ''),
        CertificateCurve=column_ifexists('certificate.curve', ''),
        CertificateExponent=column_ifexists('certificate.exponent', ''),
        CertificateHashSha1=column_ifexists('orig_certificate_sha1', ''),
        CertificateIssuer=column_ifexists('certificate.issuer', column_ifexists('client_issuer', '')),
        CertificateKeyAlg=column_ifexists('certificate.key_alg', ''),
        CertificateKeyLength=column_ifexists('certificate.key_length', ''),
        CertificateKeyType=column_ifexists('certificate.key_type', ''),
        CertificateNotValidAfter=column_ifexists('certificate.not_valid_after', ''),
        CertificateNotValidBefore=column_ifexists('certificate.not_valid_before', ''),
        CertificateSerial=column_ifexists('certificate.serial', ''),
        CertificateSigAlg=column_ifexists('certificate.sig_alg', ''),
        CertificateSubject=column_ifexists('certificate.subject', column_ifexists('client_subject', '')),
        CertificateVersion=column_ifexists('certificate.version', ''),
        CipherAlg=column_ifexists('cipher_alg', ''),
        Client=column_ifexists('client', ''),
        ClientMessage=column_ifexists('client_message', ''),
        ClientSoftware=column_ifexists('client_software', ''),
        CompileTs=column_ifexists('compile_ts', ''),
        CompressionAlg=column_ifexists('compression_alg', ''),
        Cshka=column_ifexists('cshka', ''),
        DataChannelOrigH=column_ifexists('data_channel.orig_h', ''),
        DataChannelPassive=column_ifexists('data_channel.passive', ''),
        DataChannelRespH=column_ifexists('data_channel.resp_h', ''),
        DataChannelRespP=column_ifexists('data_channel.resp_p', ''),
        Date=column_ifexists('date', ''),
        Depth=column_ifexists('depth', ''),
        DhcpAssignedIpAddr=column_ifexists('assigned_addr', ''),
        DhcpCircuitId=column_ifexists('circuit_id', ''),
        DhcpLeaseTime=column_ifexists('lease_time', ''),
        DhcpRequestedIpAddr=column_ifexists('requested_addr', ''),
        DhcpSubscriberId=column_ifexists('subscriber_id', ''),
        Direction=column_ifexists('direction', ''),
        Dnp3FunctionReply=column_ifexists('fc_reply', ''),
        Dnp3FunctionRequest=column_ifexists('fc_request', ''),
        Dnp3Iin=column_ifexists('iin', ''),
        DnsAdditionalAuthoritativeName=column_ifexists('auth', ''),
        DnsAdditionalName=column_ifexists('addl', ''),
        DnsFlagsAuthoritative=column_ifexists('AA', ''),
        DnsFlagsRecursionAvailable=column_ifexists('RA', ''),
        DnsFlagsRecursionDesired=column_ifexists('RD', ''),
        DnsFlagsTruncated=column_ifexists('TC', ''),
        DnsFlagsZ=column_ifexists('Z', ''),
        DnsQueryClass=column_ifexists('qclass', ''),
        DnsQueryClassName=column_ifexists('qclass_name', ''),
        DnsQueryName=column_ifexists('query', ''),
        DnsQueryType=column_ifexists('qtype', ''),
        DnsQueryTypeName=column_ifexists('qtype_name', ''),
        DnsRejected=column_ifexists('rejected', ''),
        DnsResponseCode=column_ifexists('rcode', ''),
        DnsResponseCodeName=column_ifexists('rcode_name', ''),
        DnsResponseName=column_ifexists('answers', ''),
        DnsResponseTtl=column_ifexists('TTLs', ''),
        DnsRtt=column_ifexists('rtt', ''),
        DnsTransactionId=column_ifexists('trans_id', ''),
        Domainname=column_ifexists('domainname', ''),
        Dropped=column_ifexists('dropped', ''),
        Dst=column_ifexists('dst', ''),
        DstBytes=column_ifexists('resp_bytes', ''),
        DstCertificateIssuerName=column_ifexists('issuer', ''),
        DstCertificateSha1=column_ifexists('resp_certificate_sha1', ''),
        DstCertificateSubjectName=column_ifexists('subject', ''),
        DstHostName=column_ifexists('http_header_host', column_ifexists('tls_server_name', '')),
        DstIpAddr=column_ifexists('id.resp_h', column_ifexists('server_addr', column_ifexists('tx_hosts', ''))),
        DstIpBytes=column_ifexists('resp_ip_bytes', ''),
        DstMac=column_ifexists('resp_l2_addr', ''),
        DstPackets=column_ifexists('resp_pkts', ''),
        DstPort=column_ifexists('id.resp_p', ''),
        Duration=column_ifexists('duration', ''),
        EmailBodySections=column_ifexists('email_body_sections', ''),
        EventDuration=column_ifexists('duration', ''),
        EventUid=column_ifexists('z_Enrichment', column_ifexists('zeek_id_uids', column_ifexists('uid', ''))),
        FailureReason=column_ifexists('failure_reason', ''),
        FileAccessedTime=column_ifexists('times_accessed', ''),
        FileChangedTime=column_ifexists('times_changed', ''),
        FileCreationTime=column_ifexists('times_created', ''),
        FileDesc=column_ifexists('file_desc', ''),
        FileDirectory=column_ifexists('cwd', ''),
        FileMimeType=column_ifexists('file_mime_type', column_ifexists('mime_type', column_ifexists('resp_mime_types', ''))),
        FileModifiedTime=column_ifexists('times_modified', ''),
        FileName=column_ifexists('filename', column_ifexists('resp_filenames', '')),
        FilePath=column_ifexists('file_name', ''),
        FilePreviousName=column_ifexists('prev_name', ''),
        FileSize=column_ifexists('file_size', column_ifexists('total_bytes', column_ifexists('size', ''))),
        FileSystemType=column_ifexists('native_file_system', ''),
        FingerprintNetworkCommunityId=column_ifexists('community_id', ''),
        FirstReceived=column_ifexists('first_received', ''),
        From=column_ifexists('from', ''),
        FtpCommandLine=column_ifexists('arg', ''),
        FtpPassive=column_ifexists('ftp_passive', ''),
        FtpProcessName=column_ifexists('command', ''),
        Fuid=column_ifexists('fuid', ''),
        Fuids=column_ifexists('fuids', ''),
        HasCertTable=column_ifexists('has_cert_table', ''),
        HasDebugData=column_ifexists('has_debug_data', ''),
        HasExportTable=column_ifexists('has_export_table', ''),
        HasImportTable=column_ifexists('has_import_table', ''),
        HashJa3=column_ifexists('ja3', ''),
        HashJa3s=column_ifexists('ja3s', ''),
        HashMd5=column_ifexists('md5', ''),
        HashSha1=column_ifexists('sha1', ''),
        HashSha256=column_ifexists('sha256', ''),
        Hassh=column_ifexists('hassh', ''),
        Hasshalgorithms=column_ifexists('hasshAlgorithms', ''),
        Hasshserver=column_ifexists('hasshServer', ''),
        Hasshserveralgorithms=column_ifexists('hasshServerAlgorithms', ''),
        Hasshversion=column_ifexists('hasshVersion', ''),
        Helo=column_ifexists('helo', ''),
        Host=column_ifexists('host', ''),
        HostKey=column_ifexists('host_key', ''),
        HostKeyAlg=column_ifexists('host_key_alg', ''),
        HostP=column_ifexists('host_p', ''),
        Hostname=column_ifexists('hostname', ''),
        HttpCookieVariables=column_ifexists('cookie_vars', ''),
        HttpInformationalCode=column_ifexists('info_code', ''),
        HttpInformationalMessage=column_ifexists('info_msg', ''),
        HttpProxiedHeaders=column_ifexists('proxied', ''),
        HttpReferrerOriginal=column_ifexists('referrer', ''),
        HttpRequestBodyBytes=column_ifexists('request_body_len', ''),
        HttpRequestHeaderHost=column_ifexists('host', ''),
        HttpRequestHeaderNames=column_ifexists('client_header_names', ''),
        HttpRequestHeaderOrigin=column_ifexists('origin', ''),
        HttpRequestMethod=column_ifexists('method', ''),
        HttpResponseBodyBytes=column_ifexists('response_body_len', ''),
        HttpResponseBodyOriginal=column_ifexists('post_body', ''),
        HttpResponseHeaderNames=column_ifexists('server_header_names', ''),
        HttpStatusCode=column_ifexists('status_code', ''),
        HttpStatusMessage=column_ifexists('status_msg', ''),
        HttpVersion=column_ifexists('version', ''),
        Id=column_ifexists('id', ''),
        InReplyTo=column_ifexists('in_reply_to', ''),
        Is64bit=column_ifexists('is_64bit', ''),
        IsExe=column_ifexists('is_exe', ''),
        IsOrig=column_ifexists('is_orig', ''),
        IsWebmail=column_ifexists('is_webmail', ''),
        KexAlg=column_ifexists('kex_alg', ''),
        LastReply=column_ifexists('last_reply', ''),
        LocalOrig=column_ifexists('local_orig', ''),
        Logcert=column_ifexists('logcert', ''),
        MacAlg=column_ifexists('mac_alg', ''),
        Machine=column_ifexists('machine', ''),
        Mailfrom=column_ifexists('mailfrom', ''),
        Matched=column_ifexists('matched', ''),
        MimeType=column_ifexists('mime_type', ''),
        Msg=column_ifexists('msg', ''),
        MsgId=column_ifexists('msg_id', ''),
        MsgOrig=column_ifexists('msg_orig', ''),
        MsgTypes=column_ifexists('msg_types', ''),
        N=column_ifexists('n', ''),
        Name=column_ifexists('name', ''),
        NetworkApplication=column_ifexists('service', ''),
        NetworkConnectionHistory=column_ifexists('history', ''),
        NetworkConnectionState=column_ifexists('conn_state', ''),
        NetworkInnerVlanId=column_ifexists('inner_vlan', ''),
        NetworkMissedBytes=column_ifexists('missed_bytes', ''),
        NetworkOuterVlanId=column_ifexists('vlan', ''),
        NetworkProtocol=case(EventType == "smb_files" or EventType == "smb_mapping" or EventType == "ssl" or EventType == "ssl_red" or EventType == "http" or EventType == "http_red", "tcp",EventType == "dhcp", "udp",column_ifexists('proto','')),
        Node=column_ifexists('node', ''),
        Note=column_ifexists('note', ''),
        Notice=column_ifexists('notice', ''),
        Os=column_ifexists('os', ''),
        OscpValidationStatus=column_ifexists('ocsp_status', ''),
        P=column_ifexists('p', ''),
        PacketSegment=column_ifexists('packet_segment', ''),
        Path=column_ifexists('path', ''),
        Peer=column_ifexists('peer', ''),
        PeerDescr=column_ifexists('peer_descr', ''),
        Rcptto=column_ifexists('rcptto', ''),
        RemoteLocationCity=column_ifexists('remote_location.city', ''),
        RemoteLocationCountryCode=column_ifexists('remote_location.country_code', ''),
        RemoteLocationLatitude=column_ifexists('remote_location.latitude', ''),
        RemoteLocationLongitude=column_ifexists('remote_location.longitude', ''),
        RemoteLocationRegion=column_ifexists('remote_location.region', ''),
        ReplyCode=column_ifexists('reply_code', ''),
        ReplyMsg=column_ifexists('reply_msg', ''),
        ReplyTo=column_ifexists('reply_to', ''),
        SanDns=column_ifexists('san.dns', ''),
        SanEmail=column_ifexists('san.email', ''),
        SanIp=column_ifexists('san.ip', ''),
        SanUri=column_ifexists('san.uri', '') ,
        SecondReceived=column_ifexists('second_received', ''),
        SectionNames=column_ifexists('section_names', ''),
        SeenIndicator=column_ifexists('seen.indicator', ''),
        SeenIndicatorType=column_ifexists('seen.indicator_type', ''),
        SeenWhere=column_ifexists('seen.where', ''),
        Server=column_ifexists('server', ''),
        ServerDnsComputerName=column_ifexists('server_dns_computer_name', ''),
        ServerMessage=column_ifexists('server_message', ''),
        ServerNbComputerName=column_ifexists('server_nb_computer_name', ''),
        ServerSoftware=column_ifexists('server_software', ''),
        ServerTreeName=column_ifexists('server_tree_name', ''),
        Service=column_ifexists('service', ''),
        ShareName=column_ifexists('path', ''),
        ShareRelativeTargetName=column_ifexists('name', ''),
        ShareType=column_ifexists('share_type', ''),
        SmbAction=column_ifexists('action', ''),
        SoftwareFlashVersionOriginal=column_ifexists('flash_version', ''),
        SoftwareType=column_ifexists('software_type', ''),
        Source=column_ifexists('source', ''),
        Sources=column_ifexists('sources', ''),
        Src=column_ifexists('src', ''),
        SrcBytes=column_ifexists('orig_bytes', ''),
        SrcDomain=column_ifexists('domain', ''),
        SrcFileName=column_ifexists('orig_filenames', ''),
        SrcFilePath=column_ifexists('src_file_name', ''),
        SrcFqdn=column_ifexists('client_fqdn', ''),
        SrcHostName=column_ifexists('host_name', ''),
        SrcIpAddr=column_ifexists('id.orig_h', column_ifexists('rx_hosts', column_ifexists('client_addr', ''))),
        SrcIpBytes=column_ifexists('orig_ip_bytes', ''),
        SrcMac=column_ifexists('mac', column_ifexists('orig_l2_addr', '')),
        SrcMimeType=column_ifexists('orig_mime_types', ''),
        SrcPackets=column_ifexists('orig_pkts', ''),
        SrcPort=column_ifexists('id.orig_p', ''),
        Sub=column_ifexists('sub', ''),
        Subject=column_ifexists('subject', ''),
        SubpressFor=column_ifexists('subpress_for', ''),
        Subsystem=column_ifexists('subsystem', ''),
        Success=column_ifexists('success', ''),
        Tls=column_ifexists('tls', ''),
        TlsCertificateValidationStatus=column_ifexists('validation_status', ''),
        TlsCipher=column_ifexists('cipher', ''),
        TlsCurve=column_ifexists('curve', ''),
        TlsEstablished=column_ifexists('established', ''),
        TlsLastAlert=column_ifexists('last_alert', ''),
        TlsNextProtocol=column_ifexists('next_protocol', ''),
        TlsNotaryResponse=column_ifexists('notary', ''),
        TlsResumed=column_ifexists('resumed', ''),
        TlsServerName=column_ifexists('server_name', ''),
        TlsVersion=column_ifexists('version', ''),
        TlsVersionNumber=column_ifexists('version_num', ''),
        To=column_ifexists('to', ''),
        TransDepth=column_ifexists('trans_depth', ''),
        TunnelType=column_ifexists('tunnel_type', ''),
        UnparsedVersion=column_ifexists('unparsed_version', ''),
        Url=column_ifexists('url', ''),
        UrlOriginal=column_ifexists('uri', ''),
        UrlQueryValues=column_ifexists('uri_vars', ''),
        UserAgent=column_ifexists('user_agent', ''),
        UserAgentOriginal=column_ifexists('user_agent', ''),
        UserName=column_ifexists('user', column_ifexists('username', '')),
        UserPassword=column_ifexists('password', ''),
        Username=column_ifexists('username', ''),
        UsesAslr=column_ifexists('uses_aslr', ''),
        UsesCodeIntegrity=column_ifexists('uses_code_integrity', ''),
        UsesDep=column_ifexists('uses_dep', ''),
        UsesSeh=column_ifexists('uses_seh', ''),
        ValidCtLogs=column_ifexists('valid_ct_logs', ''),
        ValidCtOperators=column_ifexists('valid_ct_operators', ''),
        ValidCtOperatorsList=column_ifexists('valid_ct_operators_list', ''),
        Version=column_ifexists('version', ''),
        VersionAddl=column_ifexists('version.addl', ''),
        VersionMajor=column_ifexists('version.major', ''),
        VersionMinor2=column_ifexists('version.minor2', ''),
        VersionMinor3=column_ifexists('version.minor3', ''),
        VersionMinor=column_ifexists('version.minor', ''),
        X509=column_ifexists('x509', ''),
        XOriginatingIp=column_ifexists('x_originating_ip', ''),
        ZeekConnLocalDst=column_ifexists('local_resp', ''),
        ZeekConnLocalSrc=column_ifexists('local_orig', ''),
        ZeekFilesAnalyzers=column_ifexists('analyzers', ''),
        ZeekFilesEntropy=column_ifexists('entropy', ''),
        ZeekFilesExtracted=column_ifexists('extracted', ''),
        ZeekFilesExtractedCutoff=column_ifexists('extracted_cutoff', ''),
        ZeekFilesExtractedSize=column_ifexists('extracted_size', ''),
        ZeekFilesMissingBytes=column_ifexists('missing_bytes', ''),
        ZeekFilesOverflowBytes=column_ifexists('overflow_bytes', ''),
        ZeekFilesSeenBytes=column_ifexists('seen_bytes', ''),
        ZeekFilesTimedout=column_ifexists('timedout', ''),
        ZeekHttpOmniture=column_ifexists('omniture', ''),
        ZeekHttpTags=column_ifexists('tags', ''),
        ZeekHttpTransDepth=column_ifexists('trans_depth', ''),
        ZeekIdCertChainFuids=column_ifexists('cert_chain_fuids', ''),
        ZeekIdClientCertChainFuids=column_ifexists('client_cert_chain_fuids', ''),
        ZeekIdConnUids=column_ifexists('conn_uids', ''),
        ZeekIdFuid=column_ifexists('fuid', ''),
        ZeekIdOrigFuids=column_ifexists('orig_fuids', ''),
        ZeekIdParentFuid=column_ifexists('parent_fuid', ''),
        ZeekIdRespFuids=column_ifexists('resp_fuids', ''),
        ZeekIdTunnelParents=column_ifexists('tunnel_parents', ''),
        ZeekIdUids=column_ifexists('uids', ''),
        ZeekMetaDstIpAddrHostName=column_ifexists('id.resp_h_name.vals', ''),
        ZeekMetaDstIpAddrSource=column_ifexists('id.resp_h_name.src', ''),
        ZeekMetaSrcIpAddrHostName=column_ifexists('id.orig_h_name.vals', ''),
        ZeekMetaSrcIpAddrSource=column_ifexists('id.orig_h_name.src', ''),
        ZeekOrigCc=column_ifexists('orig_cc', ''),
        ZeekRespCc=column_ifexists('resp_cc', '')
       | project
        SrcDvcHostname,
        EventEndTime,
        SrcDvcFile,
        Message,
        TimeGenerated, 
        EventType,
        EventVendor,
        EventProduct,
        Action,
        Actions,
        AgentRemoteId,
        Analyzer,
        AuthAttempts,
        AuthSuccess,
        BasicConstraintsCa,
        BasicConstraintsPathLen,
        Cc,
        CertificateCn,
        CertificateCurve,
        CertificateExponent,
        CertificateHashSha1,
        CertificateIssuer,
        CertificateKeyAlg,
        CertificateKeyLength,
        CertificateKeyType,
        CertificateNotValidAfter,
        CertificateNotValidBefore,
        CertificateSerial,
        CertificateSigAlg,
        CertificateSubject,
        CertificateVersion,
        CipherAlg,
        Client,
        ClientMessage,
        ClientSoftware,
        CompileTs,
        CompressionAlg,
        Cshka,
        DataChannelOrigH,
        DataChannelPassive,
        DataChannelRespH,
        DataChannelRespP,
        Date,
        Depth,
        DhcpAssignedIpAddr,
        DhcpCircuitId,
        DhcpLeaseTime,
        DhcpRequestedIpAddr,
        DhcpSubscriberId,
        Direction,
        Dnp3FunctionReply,
        Dnp3FunctionRequest,
        Dnp3Iin,
        DnsAdditionalAuthoritativeName,
        DnsAdditionalName,
        DnsFlagsAuthoritative,
        DnsFlagsRecursionAvailable,
        DnsFlagsRecursionDesired,
        DnsFlagsTruncated,
        DnsFlagsZ,
        DnsQueryClass,
        DnsQueryClassName,
        DnsQueryName,
        DnsQueryType,
        DnsQueryTypeName,
        DnsRejected,
        DnsResponseCode,
        DnsResponseCodeName,
        DnsResponseName,
        DnsResponseTtl,
        DnsRtt,
        DnsTransactionId,
        Domainname,
        Dropped,
        Dst,
        DstBytes,
        DstCertificateIssuerName,
        DstCertificateSha1,
        DstCertificateSubjectName,
        DstHostName,
        DstIpAddr,
        DstIpBytes,
        DstMac,
        DstPackets,
        DstPort,
        Duration,
        EmailBodySections,
        EventDuration,
        EventUid,
        FailureReason,
        FileAccessedTime,
        FileChangedTime,
        FileCreationTime,
        FileDesc,
        FileDirectory,
        FileMimeType,
        FileModifiedTime,
        FileName,
        FilePath,
        FilePreviousName,
        FileSize,
        FileSystemType,
        FingerprintNetworkCommunityId,
        FirstReceived,
        From,
        FtpCommandLine,
        FtpPassive,
        FtpProcessName,
        Fuid,
        Fuids,
        HasCertTable,
        HasDebugData,
        HasExportTable,
        HasImportTable,
        HashJa3,
        HashJa3s,
        HashMd5,
        HashSha1,
        HashSha256,
        Hassh,
        Hasshalgorithms,
        Hasshserver,
        Hasshserveralgorithms,
        Hasshversion,
        Helo,
        Host,
        HostKey,
        HostKeyAlg,
        HostP,
        Hostname,
        HttpCookieVariables,
        HttpInformationalCode,
        HttpInformationalMessage,
        HttpProxiedHeaders,
        HttpReferrerOriginal,
        HttpRequestBodyBytes,
        HttpRequestHeaderHost,
        HttpRequestHeaderNames,
        HttpRequestHeaderOrigin,
        HttpRequestMethod,
        HttpResponseBodyBytes,
        HttpResponseBodyOriginal,
        HttpResponseHeaderNames,
        HttpStatusCode,
        HttpStatusMessage,
        HttpVersion,
        Id,
        InReplyTo,
        Is64bit,
        IsExe,
        IsOrig,
        IsWebmail,
        KexAlg,
        LastReply,
        LocalOrig,
        Logcert,
        MacAlg,
        Machine,
        Mailfrom,
        Matched,
        MimeType,
        Msg,
        MsgId,
        MsgOrig,
        MsgTypes,
        N,
        Name,
        NetworkApplication,
        NetworkConnectionHistory,
        NetworkConnectionState,
        NetworkInnerVlanId,
        NetworkMissedBytes,
        NetworkOuterVlanId,
        NetworkProtocol,
        Node,
        Note,
        Notice,
        Os,
        OscpValidationStatus,
        P,
        PacketSegment,
        Path,
        Peer,
        PeerDescr,
        Rcptto,
        RemoteLocationCity,
        RemoteLocationCountryCode,
        RemoteLocationLatitude,
        RemoteLocationLongitude,
        RemoteLocationRegion,
        ReplyCode,
        ReplyMsg,
        ReplyTo,
        SanDns,
        SanEmail,
        SanIp,
        SanUri,
        SecondReceived,
        SectionNames,
        SeenIndicator,
        SeenIndicatorType,
        SeenWhere,
        Server,
        ServerDnsComputerName,
        ServerMessage,
        ServerNbComputerName,
        ServerSoftware,
        ServerTreeName,
        Service,
        ShareName,
        ShareRelativeTargetName,
        ShareType,
        SmbAction,
        SoftwareFlashVersionOriginal,
        SoftwareType,
        Source,
        Sources,
        Src,
        SrcBytes,
        SrcDomain,
        SrcFileName,
        SrcFilePath,
        SrcFqdn,
        SrcHostName,
        SrcIpAddr,
        SrcIpBytes,
        SrcMac,
        SrcMimeType,
        SrcPackets,
        SrcPort,
        Sub,
        Subject,
        SubpressFor,
        Subsystem,
        Success,
        Tls,
        TlsCertificateValidationStatus,
        TlsCipher,
        TlsCurve,
        TlsEstablished,
        TlsLastAlert,
        TlsNextProtocol,
        TlsNotaryResponse,
        TlsResumed,
        TlsServerName,
        TlsVersion,
        TlsVersionNumber,
        To,
        TransDepth,
        TunnelType,
        UnparsedVersion,
        Url,
        UrlOriginal,
        UrlQueryValues,
        UserAgent,
        UserAgentOriginal,
        UserName,
        UserPassword,
        Username,
        UsesAslr,
        UsesCodeIntegrity,
        UsesDep,
        UsesSeh,
        ValidCtLogs,
        ValidCtOperators,
        ValidCtOperatorsList,
        Version,
        VersionAddl,
        VersionMajor,
        VersionMinor2,
        VersionMinor3,
        VersionMinor,
        X509,
        XOriginatingIp,
        ZeekConnLocalDst,
        ZeekConnLocalSrc,
        ZeekFilesAnalyzers,
        ZeekFilesEntropy,
        ZeekFilesExtracted,
        ZeekFilesExtractedCutoff,
        ZeekFilesExtractedSize,
        ZeekFilesMissingBytes,
        ZeekFilesOverflowBytes,
        ZeekFilesSeenBytes,
        ZeekFilesTimedout,
        ZeekHttpOmniture,
        ZeekHttpTags,
        ZeekHttpTransDepth,
        ZeekIdCertChainFuids,
        ZeekIdClientCertChainFuids,
        ZeekIdConnUids,
        ZeekIdFuid,
        ZeekIdOrigFuids,
        ZeekIdParentFuid,
        ZeekIdRespFuids,
        ZeekIdTunnelParents,
        ZeekIdUids,
        ZeekMetaDstIpAddrHostName,
        ZeekMetaDstIpAddrSource,
        ZeekMetaSrcIpAddrHostName,
        ZeekMetaSrcIpAddrSource,
        ZeekOrigCc,
        ZeekRespCc
};
Corelight_main_view

